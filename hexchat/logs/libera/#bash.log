**** BEGIN LOGGING AT Tue Nov 15 16:01:59 2022

Nov 15 16:07:14 »»	Now talking on #bash
Nov 15 16:07:14 »»	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | https://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Nov 15 16:07:14 »»	Topic for #bash set by twkm at Fri May 21 00:17:30 2021
Nov 15 16:02:23 >alis<	LIST i3wm
Nov 15 16:07:39 -Notice-	{from alis} Returning maximum of 64 channel names matching '*i3wm*'
Nov 15 16:07:39 -Notice-	{from alis} End of output.
Nov 15 16:02:27 >alis<	LIST i3
Nov 15 16:07:44 -Notice-	{from alis} Returning maximum of 64 channel names matching '*i3*'
Nov 15 16:07:44 -Notice-	{from alis} #fedora-i3                                         39 :welcome app (Meeting topic: i3-sig) 
Nov 15 16:07:44 -Notice-	{from alis} #i3                                                45 :freenode/#i3 is moving to OFTC: https://oftc.net/ -- https://www.freelists.org/post/i3-announce/i3-IRC-channel-moving-from-Freenode-to-OFTC -- see you there 
Nov 15 16:07:44 -Notice-	{from alis} #i3Detroit                                         10 :Michigan's coolest hackerspace/makerspace since 2009, https://www.i3detroit.org/ | Semi-official; most member chat is on our Slack. | 🔨📡🔬☎🎨📏🎥💾🔧 | See the events calendar on i3detroit.org! |  welcome back my friends to the show that never ends, we're so glad you could attend, come inside come inside 
Nov 15 16:07:44 -Notice-	{from alis} End of output.
Nov 15 16:09:29 .:Soliton:.	i can maybe imagine those numbers to be completely unconnected. (sounds terrible for debugging) but connected with +1 just makes no sense to me.
Nov 15 16:41:23 .:uniqdom:.	I mistakenly run this command "nano .bashrc | grep emacs". How do I interrupt its execution?. CTRL+C and CTRL+Z doesn't work.
Nov 15 16:42:21 .:tirnanog:.	exit nano in the samy way that you would normally. if that doesn't work, identify its process id elsewhere and kill it.
Nov 15 16:42:27 .:tirnanog:.	same
Nov 15 16:42:59 .:uniqdom:.	tirnanog, exiting nano worked. ;)
Nov 15 16:43:04 .:uniqdom:.	thanks
Nov 15 17:17:58 .:Artfaith:.	Marvelous day! ^^
Nov 15 17:20:07 .:Artfaith:.	Wooledge: "Never use `getopt`... Please forget that it ever existed..."
Nov 15 17:22:36 .:Artfaith:.	Yeah... you'd say "getopts"!
Nov 15 17:23:20 .:Artfaith:.	And you'd say "yet another ooption parser" which count at least at over9999+ out there
Nov 15 17:24:56 .:Artfaith:.	Though... I still share my version of an option parser this week or slightly later. I still requires a quite of refactoring and lack of features I will eventually apply, but it's already a base I coded back in the days and had no issues with while using, so... someone might like it, too ^^
Nov 15 17:25:48 .:Earnestly:.	Produce code that allows the total amount of code in the wild to decrease
Nov 15 17:25:55 .:Artfaith:.	Also, knowing local Pros, someone might suggest anything to enhance the code in general. I would very glad to hear any suggestions! ^^
Nov 15 17:26:12 .:Artfaith:.	be very*
Nov 15 17:26:45 .:Artfaith:.	It's in a shape of library, so just source and good to go
Nov 15 17:28:15 .:Artfaith:.	I will still share*
Nov 15 17:28:26 .:Artfaith:.	It still requires*
**** ENDING LOGGING AT Tue Nov 15 17:23:23 2022

**** BEGIN LOGGING AT Wed Nov 16 14:22:59 2022

Nov 16 14:28:16 »»	Now talking on #bash
Nov 16 14:28:16 »»	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | https://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Nov 16 14:28:16 »»	Topic for #bash set by twkm at Fri May 21 00:17:30 2021
Nov 16 14:24:27 .:woland:.	Hi, scripting newbie here. I was trying to write a very simple script to search the AUR using the lynx browser. The script works and opens the lynx browser but then quickly closes itself. 
Nov 16 14:24:35 .:woland:.	here is what I have http://0x0.st/oIew.sh
Nov 16 14:30:09 .:djph:.	!check
Nov 16 14:30:10 <checkbot>	woland: Line 9: This & terminates the command. Escape it or add space after & to silence. Line 6: read without -r will mangle backslashes. Line 9: K appears unused. Verify use (or export if used externally). See https://shellcheck.net/?id=cb96410
Nov 16 14:25:55 .:woland:.	what is this
Nov 16 14:33:57 .:djph:.	what is what?
Nov 16 14:34:05 .:djph:.	shellcheck?
Nov 16 14:33:59 .:woland:.	ah, the & terminates the command? 
Nov 16 14:34:05 .:woland:.	O.o
Nov 16 14:34:44 .:woland:.	what the hell that solved it!
Nov 16 14:40:56 .:sixwheeledbeast:.	why use read at all?
Nov 16 14:42:13 .:sixwheeledbeast:.	pass your search string as an argument?
Nov 16 14:38:54 .:woland:.	i wanted it to be interactive-ish 
Nov 16 14:39:12 .:woland:.	and then expand it with some arguments and if conditions to search other places too
Nov 16 14:48:39 .:sixwheeledbeast:.	!echo
Nov 16 14:48:39 .:greybot:.	echo outputs a string. echo has many portability problems, and should never be used with option flags. Consider printf instead: printf 'name: %s\n' "$name". http://wiki.bash-hackers.org/commands/builtin/echo | http://cfajohnson.com/shell/cus-faq.html#Q0b | http://www.in-ulm.de/~mascheck/various/echo+printf
Nov 16 14:49:06 .:woland:.	I changed it to printf
Nov 16 15:01:17 .:emanuele6:.	that is most likely an unnecessary space.
Nov 16 15:01:28 .:emanuele6:.	oops, i was scrolled up a lot
Nov 16 15:02:31 .:Guest11:.	i need some help with scripting
Nov 16 15:02:46 .:emanuele6:.	(it was wrt using  $(printf '%s ' "-S "foo-{1..30}) instead of just -Sfoo-{1..30})
Nov 16 15:04:05 .:Guest11:.	https://github.com/thanasxda/basic-linux-setup/blob/965db45f204f6468b1d9cedac3eabbcc8d0f1f90/init.sh#L1304
Nov 16 15:04:08 .:checkbot:.	Guest11: I think the problem is on line 941. Remove spaces around = to assign (or use [ ] to compare, or quote '=' if literal). See 546 issues on https://shellcheck.net/?id=cb98447
Nov 16 15:04:15 .:Guest11:.	heres the part i need help with this works for console not in script
Nov 16 15:08:29 .:geirha:.	use arrays instead of var$num
Nov 16 15:10:34 <Earnestly>	woland: Something to ponder: https://0x0.st/oI28.sh
Nov 16 15:11:17 .:Earnestly:.	> 546 issues
Nov 16 15:12:25 .:Guest11:.	thanks geirha
Nov 16 15:13:25 .:geirha:.	that'll be a pain to maintain
Nov 16 15:14:15 .:Earnestly:.	Imagine having to add every iface
Nov 16 15:14:44 .:Earnestly:.	Instead of just programmatically determining it, or defining it to be something specific
Nov 16 15:15:10 .:Guest11:.	i guess i can grep or awk it from ifconfig
Nov 16 15:15:30 .:Guest11:.	but i didnt cause interfaces sometimes have weird names depending on device
Nov 16 15:15:47 .:geirha:.	if [ "$(awk '/MemTotal/ { print $2 }' /proc/meminfo | cut -c1-1)" -ge 32 ]    interesting how you epxect a single digit to be greater than 32
Nov 16 15:16:09 .:Guest11:.	ah thanks for pointing out, yes still contains lots of mistakes
Nov 16 15:16:21 .:Guest11:.	check if u find more cause i overlook much stuff since stil working on it
Nov 16 15:17:34 .:Guest11:.	or any suggested improvements are welcome
Nov 16 15:22:52 .:Soliton:.	could start with the 546 issues shellcheck found.
Nov 16 15:23:43 .:Guest11:.	those are values for sysctl.conf that dont apply in the script for convenience it just replicates as sysctl as well
Nov 16 15:26:57 .:Soliton:.	there are hundreds more issues.
Nov 16 15:27:18 .:Soliton:.	no idea what you mean with they don't apply anyway.
Nov 16 15:27:32 .:Soliton:.	it's in the middle of the script.
Nov 16 15:27:39 .:Guest11:.	the thing is many things that work for linux are problematic on openwrt
Nov 16 15:28:23 .:Guest11:.	so you suggest checking shellcheck and improving all the script related stuff as well
Nov 16 15:28:50 .:Soliton:.	getting basic quoting right will certainly get you a long way.
Nov 16 15:28:59 .:Guest11:.	ok thanks man
Nov 16 15:32:19 .:woland:.	Earnestly: thanks. Im gonna have to search every line of it to learn lol
Nov 16 17:10:59 .:CrtxReavr:.	lockywolf, that's probably a good mnemonic.  Thanks.
Nov 16 17:27:32 .:ozzzo_work:.	What am I doing wrong here? https://paste.centos.org/view/b1723ae6
Nov 16 17:27:46 .:ozzzo_work:.	$i and $j aren't getting set
Nov 16 17:28:22 .:Earnestly:.	!check
Nov 16 17:28:23 .:checkbot:.	Earnestly: Unable to read that :/
Nov 16 17:28:32 .:Earnestly:.	!check https://paste.centos.org/view/raw/b1723ae6
Nov 16 17:28:33 .:checkbot:.	Earnestly: Line 8: Use $(...) notation instead of legacy backticks `...`. Line 54: Use $(...) notation instead of legacy backticks `...`. Line 46: Double quote to prevent globbing and word splitting. See https://shellcheck.net/?id=cb7113 for all 16 issues.
Nov 16 17:28:49 .:kawza:.	ozzzo_work: please post the  /view/raw/ link next time
Nov 16 17:29:21 .:han-solo:.	!check https://paste.centos.org/view/raw/b1723ae6
Nov 16 17:29:22 .:checkbot:.	han-solo: Line 8: Use $(...) notation instead of legacy backticks `...`. Line 54: Use $(...) notation instead of legacy backticks `...`. Line 46: Double quote to prevent globbing and word splitting. See https://shellcheck.net/?id=cb7161 for all 16 issues.
Nov 16 17:29:27 .:han-solo:.	oh, whoops
Nov 16 17:29:32 .:Swahili:.	Q: I've got a program that takes an arg e.g. dotenv -e .env.development my-other-program some-args; I'd like to control the -e argument by passing an arg but if none is provide default to something. My attemp was dotenv -e \".env.${1:-\"development\"}\"
Nov 16 17:29:41 .:Swahili:.	which is not successful, does anyone know how to do that?
Nov 16 17:30:07 .:llua:.	heh
Nov 16 17:31:03 .:llua:.	that script is pretty janky
Nov 16 17:31:06 .:Earnestly:.	ozzzo_work: Are you expecting parallel(1) to set variables in the current shell?
Nov 16 17:31:19 .:llua:.	seemingly yes
Nov 16 17:31:30 .:ozzzo_work:.	I don't really know how parallel works.
Nov 16 17:31:36 .:ozzzo_work:.	I'm trying it for the 1st time
Nov 16 17:31:41 .:Earnestly:.	ozzzo_work: If you consider use of del_rule as sh -c 'del_rule', does it make sense that any variable assigned in that shell will not affect the current context?
Nov 16 17:31:41 .:ozzzo_work:.	what do I need to do w/the vars?
Nov 16 17:32:02 .:kawza:.	ozzzo_work: the lines 34 and below are commented out.  everywhere else in the script i and j are untouched
Nov 16 17:32:09 .:ozzzo_work:.	do I need to export them in del_rule?
Nov 16 17:32:12 .:Earnestly:.	# a=1; sh -c 'a=42'; declare -p a # does this make sense to you?
Nov 16 17:32:14 .:shbot:.	Earnestly: declare -- a="1"
Nov 16 17:32:22 .:Earnestly:.	ozzzo_work: No, you can't do what you're intending
Nov 16 17:33:16 .:Earnestly:.	The only way to extract j/i would be to use some form of IPC, whether that's printing to stdout, files, sockets, fifos, whatever.  With all the massive headaches that generates
Nov 16 17:34:02 .:Earnestly:.	You could write for example a . to a file for every successful deletion and then use wc -c to extract the total but you'll have to think about this
Nov 16 17:34:06 .:tirnanog:.	Swahili: the backslashes there are a curious thing to behold. is this to be genuinely executed by a shell, directly?
Nov 16 17:34:09 .:Earnestly:.	!wait-n
Nov 16 17:34:10 .:greybot:.	Run up to 5 processes in parallel (bash 4.3): i=0 j=5; for elem in "${array[@]}"; do (( i++ < j )) || wait -n; my_job "$elem" & done; wait
Nov 16 17:34:27 .:Earnestly:.	Perhaps even keeping it all within the shell can help if you want to preserve access to the current shell context
Nov 16 17:34:44 .:Swahili:.	tirnanog: thanks for looking, should've thought about that and simplified. Calling from a nodejs package.json file
Nov 16 17:35:40 .:Earnestly:.	ozzzo_work: (It's also hard to advise much since almost everything in this code is wrong/unnecessary, such as use of date +%s and bc -l for subtraction.  E.g. printf -v start '%(%s)T' -1; ... then runtime=$((end - start))
Nov 16 17:36:11 .:Earnestly:.	Using a for loop over `` relying on wordsplitting
Nov 16 17:36:28 .:Earnestly:.	Basically using no quoting anywhere, which invokes wordsplitting and file glob expansion
Nov 16 17:36:51 .:Earnestly:.	Why i and j both increment but only j appears to be used
Nov 16 17:37:41 .:Earnestly:.	(i is never reset, so they both do the same thing)
Nov 16 17:38:25 .:tirnanog:.	Swahili: all I can say is that it's appropriate shell code in the case that the backslashes are remoed.
Nov 16 17:38:40 .:ozzzo_work:.	I set I to 0 on line 33
Nov 16 17:39:58 .:ozzzo_work:.	What's the better alternative to using a for loop with backticks?
Nov 16 17:41:09 .:Swahili:.	tirnanog: thank you!
Nov 16 17:41:16 .:geirha:.	depends what you're iterating
Nov 16 17:41:18 .:kurahaupo_:.	ozzzo_work: while read…
Nov 16 17:41:33 .:kurahaupo_:.	!for`
Nov 16 17:41:33 .:greybot:.	Never do this: for x in $(command) or `command` or $var. for-in is used for iterating arguments, not (output) strings. Instead, use a glob (eg. *.txt), arrays (eg. "${names[@]}") or a while-read loop (eg. while read -r line). See http://mywiki.wooledge.org/BashPitfalls#pf1 and http://mywiki.wooledge.org/DontReadLinesWithFor
Nov 16 17:41:47 .:tirnanog:.	Swahili: if that's not enough, you would need to elaborate on what appears to be wrong, while taking into account this additional layer of parsing/quoting that you apparently have.
Nov 16 17:41:52 .:Earnestly:.	ozzzo_work: I'll do a basic rewrite
Nov 16 17:43:08 .:kurahaupo_:.	ozzzo_work: The problem with your original paste is that "parallel" runs an entirely separate process, so any changes to its variables are not visible to your main script.
Nov 16 17:44:18 .:ozzzo_work:.	ok reading ty
Nov 16 17:44:28 .:kurahaupo_:.	ozzzo_work: Also PLEASE forget that you ever heard about backticks, and use $(…) instead
Nov 16 17:46:56 .:llua:.	and aliases
Nov 16 17:56:44 .:Earnestly:.	ozzzo_work: Something like: https://0x0.st/oI_A.sh
Nov 16 17:56:49 .:Earnestly:.	iiuic
Nov 16 17:57:24 .:ozzzo_work:.	ok I'll try that, ty!
Nov 16 17:57:43 .:Earnestly:.	ozzzo_work: Don't try it
Nov 16 17:58:11 .:Earnestly:.	ozzzo_work: It's for you to read and understand, to incorporate it into whatever else you've got going
Nov 16 18:00:01 .:ozzzo_work:.	!mapfile
Nov 16 18:00:01 .:greybot:.	Read lines from a file/stream into an array: mapfile -t arrayname < file OR mapfile -t arrayname < <(some cmd); # In bash < 4, use a loop; see FAQ 5 or http://wiki.bash-hackers.org/commands/builtin/mapfile
Nov 16 18:00:04 .:Earnestly:.	And hopefully reference the manual for the bits which are new to you
Nov 16 18:00:09 .:Earnestly:.	(Don't google)
Nov 16 18:01:05 .:Cyclohexane:.	How do I prefix every array element with a string? https://rextester.com/CUFOS29670 it's only doing the first element
Nov 16 18:01:37 .:Earnestly:.	ozzzo_work: Also I shouldn't use else in the parallel array, it should just end with fi and del_rule outside of the if statement
Nov 16 18:02:15 .:Earnestly:.	Cyclohexane: for loop, which you can do by avoiding the read
Nov 16 18:02:23 .:ozzzo_work:.	ok ty Earnestly
Nov 16 18:02:59 .:Earnestly:.	You're using implicit splitting over ' ', which is not a good idea for options, but if you did use a for loop over it you'll have to disable file glob expansion with set -f
Nov 16 18:03:01 .:osse:.	# values=(a b c d); echo "${values[@]/#/--arg=}"
Nov 16 18:03:03 .:shbot:.	osse: --arg=a --arg=b --arg=c --arg=d
Nov 16 18:03:20 .:Earnestly:.	osse: The problem is of course the space
Nov 16 18:03:48 .:Cyclohexane:.	the export line is coming from another file - source vars.sh
Nov 16 18:03:51 .:osse:.	ah
Nov 16 18:03:56 .:Earnestly:.	ozzzo_work: And use shellcheck
Nov 16 18:04:16 .:Earnestly:.	Cyclohexane: Yeah it's pretty nasty, but if that's what you've got to work with, there's not much you can do
Nov 16 18:05:15 .:Earnestly:.	Cyclohexane: I.e. set +f; IFS=' '; for opt in $IONCUDE...OPTS; do opts+=(--copy "$opt"); done; set -f; unset IFS
Nov 16 18:05:19 .:Earnestly:.	It's pretty ugly
Nov 16 18:05:45 .:emanuele6:.	set -f
Nov 16 18:05:57 .:Soliton:.	less ugly with read.
Nov 16 18:06:09 .:Earnestly:.	Soliton: Still need a for loop
Nov 16 18:06:30 .:Soliton:.	for the add --copy, sure.
Nov 16 18:06:39 .:Soliton:.	unless --copy= works.
Nov 16 18:06:44 .:Earnestly:.	Hopefully
Nov 16 18:07:01 .:Earnestly:.	Maybe this vars.sh can store it as an array in the first place
Nov 16 18:07:21 .:Cyclohexane:.	I basically want to export a list which can be used in multiple scripts, and conditionally prefix the list
Nov 16 18:07:23 .:Soliton:.	that'd be much nicer.
Nov 16 18:07:33 .:Soliton:.	you can't export a list.
Nov 16 18:07:46 .:Soliton:.	where does export come in anyway?
Nov 16 18:07:53 .:Soliton:.	you said you source a file.
Nov 16 18:08:07 .:Cyclohexane:.	yeah I source the var file
Nov 16 18:08:17 .:Cyclohexane:.	export isn't necessary?
Nov 16 18:08:18 .:Soliton:.	so no export involved?
Nov 16 18:08:26 .:Soliton:.	necessary for what?
Nov 16 18:08:41 .:Earnestly:.	Cyclohexane: The problem with --copy vs. --copy= is that in one case you're doing ["foo"] => ["--copy=foo"] while in the other you're trying to do ["--copy", "foo"]
Nov 16 18:08:50 .:Cyclohexane:.	I figured I need to export the var for the source to work, but I guess not
Nov 16 18:08:56 .:Earnestly:.	Indeed no
Nov 16 18:08:59 .:Earnestly:.	!.
Nov 16 18:09:02 .:Earnestly:.	!source
Nov 16 18:09:03 .:greybot:.	''. scriptname'' (or ''source scriptname'', which is not portable) reads and executes the commands from scriptname in the current shell, as opposed to a separate instance of the shell. If scriptname does not contain a slash (/), it will be searched for in $PATH.
Nov 16 18:09:09 .:Soliton:.	no, you export for child processes to get the env variable.
Nov 16 18:09:36 .:Soliton:.	does vars.sh need to be sh compatible?
Nov 16 18:09:37 .:Cyclohexane:.	can I pass arguments to source?
Nov 16 18:09:40 .:Soliton:.	yes.
Nov 16 18:10:02 .:Cyclohexane:.	doesn't need to be sh compatible no
Nov 16 18:10:02 .:Soliton:.	if you just source from bash then make the list a proper array.
Nov 16 18:10:06 .:Cyclohexane:.	ill have a play
Nov 16 18:10:09 .:Cyclohexane:.	ta
Nov 16 18:11:33 .:Soliton:.	then you can either do "${list[@]/#/--copy=}" or a loop with --copy as Earnestly showed.
Nov 16 18:12:37 .:itt788:.	'for i in 1 2 3; do ls ${i}_*; done' works supposing forders/files starting with 1_, 2_, or 3_ exist
Nov 16 18:12:57 .:Soliton:.	ls "$i"_*
Nov 16 18:13:24 »»	Earnestly .oO(ls [123]_*)
Nov 16 18:14:41 .:itt788:.	but 'for i in 1 2 3; do mkdir $"i"_*/newrep; done' does not
Nov 16 18:15:01 .:Soliton:.	nothing matches naturally.
Nov 16 18:15:12 .:Soliton:.	can't glob something you want to create.
Nov 16 18:15:35 .:kurahaupo_:.	for i in [123]_* ; do mkdir "$i/newrep"; done
Nov 16 18:15:35 .:Earnestly:.	itt788: for i in [123]_*; do mkdir -- "$i"/newrep; done
Nov 16 18:15:40 .:Earnestly:.	heh
Nov 16 18:15:59 .:kurahaupo_:.	or rather
Nov 16 18:16:05 .:Soliton:.	needs trailing /
Nov 16 18:16:10 .:kurahaupo_:.	for i in [123]_*/ ; do mkdir "$i"newrep ; done
Nov 16 18:16:12 .:Earnestly:.	True
Nov 16 18:16:47 .:kurahaupo_:.	also mkdir -p to avoid complaining about existing directories
Nov 16 18:16:48 .:Earnestly:.	(Sometimes I cheekily rely on mkdir/tools to fail)
Nov 16 18:17:06 .:Earnestly:.	Why do the work twice eh?
Nov 16 18:17:28 .:Soliton:.	dirs=([123]_*/); mkdir "${dirs[@]/%/newrep}"
Nov 16 18:17:53 .:Earnestly:.	Splendid
Nov 16 18:18:04 »»	Earnestly ARG_MAX enters the game
Nov 16 18:18:15 .:kurahaupo_:.	A=( [123/]_*/ ) ; mkdir -pv "${A[@/%/newrep}"
Nov 16 18:18:32 .:kurahaupo_:.	Soliton: gah, you type faster than me
Nov 16 18:19:30 .:Earnestly:.	find . -type d -name '[123]_*' -exec sh -c 'mkdir -- "$@"' _ {} +
Nov 16 18:20:04 .:kurahaupo_:.	printf %snewrep\\0 [123/]_*/ | xargs -r0 mkdir -pv
Nov 16 18:20:36 .:kurahaupo_:.	Earnestly: newrep subdir?
Nov 16 18:20:36 .:Earnestly:.	kurahaupo_: Why the / after 3 in both examples?
Nov 16 18:20:49 .:Earnestly:.	kurahaupo_: Sorry yeah the sh -c should have added that
Nov 16 18:20:53 .:kurahaupo_:.	typo
Nov 16 18:21:01 .:kurahaupo_:.	printf %snewrep\\0 [123]_*/ | xargs -r0 mkdir -pv
Nov 16 18:21:19 .:Earnestly:.	Actually that cannot work then with find
Nov 16 18:21:31 .:Earnestly:.	Nevermind the find solution then
Nov 16 18:22:44 .:Earnestly:.	kurahaupo_: Btw, I've taken to quoting the printf specifier regardless just in case I include a glob
Nov 16 18:23:03 .:Earnestly:.	printf [%s]\\n
Nov 16 18:23:43 .:itt788:.	nice
Nov 16 18:26:14 .:kurahaupo_:.	Earnestly: I just start by writing the raw text, then add whatever minimal escaping or quoting is required. Picking a particular style of quoting ahead of time can lead to lazy thinking, and that can lead to bugs
Nov 16 18:26:42 .:Earnestly:.	kurahaupo_: ' is pretty reasonable
Nov 16 18:26:44 .:kurahaupo_:.	So printf \[%s]\\n or '[%s]\n'
Nov 16 18:26:57 .:Earnestly:.	That said, I don't use quotes for printf %d type deals
Nov 16 18:27:43 .:kurahaupo_:.	I generally only use \\n when that's the only thing that needs quoting
Nov 16 19:13:14 .:GuiToris:.	hello
Nov 16 19:14:32 .:GuiToris:.	I had many symlinks, a wanted to make them real, so I basically did $ sed -i '' [links]
Nov 16 19:14:38 .:GuiToris:.	does it alter the original files?
Nov 16 19:18:55 .:djph:.	you wha?
Nov 16 19:23:00 .:GuiToris:.	sed -i '' *.jpg for instance
Nov 16 19:23:17 .:GuiToris:.	I just don't know if it had touched the original photos
Nov 16 19:23:58 .:CrtxReavr:.	Well, hard links are actual files.
Nov 16 19:24:10 .:CrtxReavr:.	More specifically, multiple file names pointing to the same inodes.
Nov 16 19:24:28 .:Soliton:.	running a line based text tool on binary data may not be the best idea.
Nov 16 19:24:46 .:GuiToris:.	I didn't say they were hard links :/
Nov 16 19:25:00 .:CrtxReavr:.	10:44 < GuiToris> I had many symlinks, a wanted to make them real
Nov 16 19:25:09 .:GuiToris:.	symlinks
Nov 16 19:25:10 .:GuiToris:.	symbolic
Nov 16 19:25:31 .:CrtxReavr:.	Yes, and the part to the right of the comma?
Nov 16 19:26:10 .:GuiToris:.	symlinks are not real files, they just point to somewhere else
Nov 16 19:26:13 .:GuiToris:.	I needed real files
Nov 16 19:26:27 .:CrtxReavr:.	Yes, but hardlinks are.
Nov 16 19:26:37 .:GuiToris:.	now, I see your point
Nov 16 19:26:51 .:GuiToris:.	but you cannot convert symbolic links to hardlinks either
Nov 16 19:27:06 .:GuiToris:.	that's why I did what I wrote
Nov 16 19:27:16 .:GuiToris:.	I just want to make sure it didn't alter the original files
Nov 16 19:27:22 .:GuiToris:.	I don't want corrupt images
Nov 16 19:27:38 .:djph:.	if you want real files, remove the links, copy the files
Nov 16 19:27:44 .:djph:.	or make hardlinks if they're the same FS
Nov 16 19:28:57 .:GuiToris:.	I selected them for hours, I just didn't realize dropbox cannot synchronize them
Nov 16 19:29:11 .:GuiToris:.	so I quickly solved the problem
Nov 16 19:31:16 .:CrtxReavr:.	It's wise to know the nature of links and symlinks and how they differ, as well as how they reflect the "three-layered" nature of UNIX filesystems.
Nov 16 19:43:13 .:Swahili:.	Q: I've got> dotenv -e filename -- <command with args>, I'd like to make the first part a script, so I could I exec the <commands with args> from a script? would just exec $1 or something?
Nov 16 19:45:35 .:emanuele6:.	what do you mean with "the first part"?
Nov 16 19:46:09 .:Swahili:.	emanuele6: thanks for looking! The <dotenv -e filename> part
Nov 16 19:46:43 .:Swahili:.	the original command goes like> dotenv -e .env -- otherProgram args
Nov 16 19:46:45 .:emanuele6:.	then what do you mean with "make it a script"? i don't understand what you want to do
Nov 16 19:48:16 .:Swahili:.	emanuele6: the dotenv allows me to run local environment variables from a local file but in the ci context I don't want to use it, so figuring out a way to skip it. But as a reusable script, as I'm going to prefix serveral comands with it
Nov 16 19:50:48 .:Soliton:.	if you want to exec the remaining arguments then you do: exec "$@"
Nov 16 19:51:05 .:emanuele6:.	sorry but that i still don't understand what you are trying to accomplish regardless of what dotenv is
Nov 16 19:51:46 .:Soliton:.	afaict they conditionally want to call  dotenv ... -- foo bar baz  or just  foo bar baz.
Nov 16 19:52:14 .:Swahili:.	Soliton: thanks for the tip! I'll experiment with that.
Nov 16 19:52:40 .:Swahili:.	emanuele6: it's one of those ideas, not sure how it'll work just checking the dev experience
Nov 16 19:54:19 .:Soliton:.	maybe a function is enough: maybe_call_dotenv() { if ...; then dotenv -e filename -- "$@"; else "@"; fi; }
Nov 16 19:54:36 .:Soliton:.	oops forgot a $ there.
Nov 16 19:57:44 .:Swahili:.	Soliton: oh, way more readable, thank you so much!
Nov 16 20:00:41 .:emanuele6:.	could also use    maybe_call_dotenv () { if ...; then dotenv -e "$1" -- "${@:2}"; else "${@:2}"; fi }
Nov 16 20:01:07 .:emanuele6:.	if you need to pass different arguments to dotenv-e
Nov 16 20:07:03 .:Earnestly:.	(Probably overkill for this but recall that you can redefine dotenv as a function on the fly to include flags as needed, dotenv() { command dotenv -e "$@"; }, and so on)
Nov 16 20:20:57 .:Artfaith:.	Also, consider `alias`
Nov 16 20:21:13 .:Artfaith:.	However, `alias` may not work in the same context.
Nov 16 20:21:39 .:emanuele6:.	that is bad advice, alias would totally not work if this code is supposed to be run in a function
Nov 16 20:21:42 .:Artfaith:.	SC2262, SC2263
Nov 16 20:22:53 .:emanuele6:.	alias expansion occurs when bash reads the code to parse it, bash doesn't reparse code when running a function, and aliases in functions are expanded when the function is parsed
Nov 16 20:23:17 .:Artfaith:.	emanuele6, as I mentioned above two times already.
Nov 16 20:23:21 .:Artfaith:.	The direct link: https://www.shellcheck.net/wiki/SC2262
Nov 16 20:23:24 .:emanuele6:.	(when the funciton is defined)
Nov 16 20:23:49 .:Artfaith:.	I suggested to consider not to apply. Perhaps the whole idea needs just an alias and not the function.
Nov 16 20:24:01 .:Artfaith:.	The whole task.
Nov 16 20:24:09 .:emanuele6:.	ok, so it is not a good application for aliases, no point in using aliases for this.
Nov 16 20:24:10 .:Artfaith:.	Who knows the X
Nov 16 20:25:31 .:Artfaith:.	I see and sorry for the bad advice.
Nov 16 20:25:50 .:Artfaith:.	am sorry*
Nov 16 20:30:11 .:Earnestly:.	# export FOO=bar; FOO= awk 'BEGIN {print ENVIRON["FOO"]}'
Nov 16 20:30:14 .:shbot:.	Earnestly: no output
Nov 16 20:30:39 .:Earnestly:.	I do wish posix sh had / and // PEs
Nov 16 20:31:59 .:emanuele6:.	k# str='POSIX sh'; print -r -- "${str//@(?)@(?)/\2\1}"
Nov 16 20:32:01 .:shbot:.	emanuele6: OPIS Xhs
Nov 16 20:34:10 .:Earnestly:.	I think if I didn't limit myself to sh, I'd probably just use zsh.  At least then I could store nul's in variables
Nov 16 20:35:42 .:Guest2938:.	Hi, i want to get highest index value from java configuration.  ex : wrapper.java.additional.16=-Dxxxx
Nov 16 20:36:10 .:Guest2938:.	wrapper.java.additional.17=-Dxxxxssd
Nov 16 20:36:22 .:Guest2938:.	then get the highest index as 17
Nov 16 20:36:42 .:Earnestly:.	Guest2938: sort -t . -k4,4n
Nov 16 20:38:19 .:Earnestly:.	awk -F . 'max < $4 {max = $4} END {print max}' # or so, awk will weakly typecast that 16= into 16
Nov 16 20:45:21 .:Guest2938:.	getting error as " yaml configuration or create a custom one if needed"
Nov 16 20:45:49 .:Earnestly:.	Guest2938: Use a yaml parser
Nov 16 20:47:20 .:Guest2938:.	its just text configuration with comments
Nov 16 20:48:08 .:Earnestly:.	Sure, but it's also yaml, and with any format you should use an appropriate parser for it, like jq for json.  Either that or implement a yaml parser yourself
Nov 16 20:48:25 .:Earnestly:.	Much like xml is interrogated with xpath, xquery, etc.
Nov 16 20:48:55 .:Earnestly:.	You can probably get away with just looking for the key and then isolating the operations to those keys, either in one go or in a filter of two
Nov 16 20:51:06 .:Earnestly:.	E.g. libfyaml comes with fy-tool that can produce yaml in a reliable format
Nov 16 20:51:17 .:Earnestly:.	Or fy-filter
Nov 16 20:52:54 .:Earnestly:.	Or gojq, which has yaml support
Nov 16 20:54:20 .:mingdao:.	When I issue `ping -D server | while read row; do awk '{ sub(/[0-9]{10}/, strftime("%Y-%m-%d %H:%M:%S:%Z", substr($0,2,10))) }1' <<< "$row" ; done` what is the data after the %Z ... [2022-11-16 11:23:32:CST.414456]
Nov 16 20:54:38 .:mingdao:.	I want just [2022-11-16 11:23:32:CST]
Nov 16 20:55:16 .:emanuele6:.	Earnestly: $(cmd | base64)
Nov 16 20:55:17 .:Earnestly:.	mingdao: Why on earth are you using read?
Nov 16 20:55:35 .:mingdao:.	IDK
Nov 16 20:55:52 .:mingdao:.	Earnestly: It was given to me that way, as a way to ping with timestamps.
Nov 16 20:55:56 .:emanuele6:.	ksh93 also has a base64 type that encodes any value that is assigned to the variable, and a printf format that decodes base64
Nov 16 20:56:35 .:Earnestly:.	Guest2938: Sorry, -F should have been -F '[.=]' or so
Nov 16 20:57:12 .:Earnestly:.	emanuele6: Yeah, it's either ksh or zsh
Nov 16 20:58:34 .:Guest2938:.	Earnestly that i corrected though. but am not able to get rid of yaml error.
Nov 16 20:58:37 .:Earnestly:.	mingdao: You just want the date, nothing else?
Nov 16 20:59:08 .:Earnestly:.	mingdao: Not even the ttl and such?
Nov 16 20:59:33 .:mingdao:.	It's rather a loaded question.  Let me see if I can make it more plain for what I want.
Nov 16 20:59:55 .:Earnestly:.	mingdao: It just seems odd to want the seconds, and so would change the potential solutions
Nov 16 21:00:46 .:mingdao:.	I really don't, tbh.  We have the timeline output for some SRE notifications presently using [dd HH:mmZ]
Nov 16 21:01:34 .:mingdao:.	There is a poll, what you would like, and I want [2022-11-16 11:23:32:CST], but I don't know how to write that in format, such as one person is purposing 2022-11-16T17:00:00Z (YYYY-MM-DDTHH:mm:ssZ)
Nov 16 21:02:23 .:mingdao:.	The seconds are not required, but I like them to see when someone posts at the same HHmm
Nov 16 21:02:34 .:Earnestly:.	mingdao: The format you want is RFC3339 where the T is optional, except the zone is not separated by :
Nov 16 21:02:59 .:Earnestly:.	The format one person is purposing is also RFC3339, but probably ISO8601
Nov 16 21:03:38 .:mingdao:.	The poll has: 16 17:00Z (dd HH:mmZ) ; 2022-11-16T17:00Z (YYYY-MM-DDTHH:mmZ) ; 2022-11-16T17:00:00Z (YYYY-MM-DDTHH:mm:ssZ) ; Other:
Nov 16 21:03:49 .:Earnestly:.	mingdao: If you're just changing the date format inline, dateconv(1) -S is quite lovely, use of awk strftime is gawk and may need fflush for ping(8)
Nov 16 21:04:11 .:Friithian:.	why is it even being polled, datetime should just always be ISO8601 (imo)
Nov 16 21:04:34 .:mingdao:.	This isn't for ping, or my example.  I'm just trying to get ... okay.
Nov 16 21:04:47 .:Earnestly:.	mingdao: Do you think the SRE output has a proper log somewhere which you can use instead of absorbing what looks like more human friendly version?
Nov 16 21:04:50 .:mingdao:.	Once again it's The mingdao Problem.  Don't know how to ask the question.
Nov 16 21:04:53 »»	mingdao moves on
Nov 16 21:05:32 .:Earnestly:.	Yeah I gathered that it wasn't for ping
Nov 16 21:06:28 .:Earnestly:.	But I wonder if it's just human friendly version, like '3 hours ago'
Nov 16 21:07:42 .:Earnestly:.	mingdao: If you have to deal with multiple formats, dateconv is also nice.  I deal with RSS feeds and they're all mostly different, but I found a common set so I use: https://0x0.st/oVA4.txt - for example
Nov 16 21:08:05 .:Earnestly:.	(Care is taken so the formats match precisely on a line)
Nov 16 21:08:59 .:tirnanog:.	-D Print timestamp (unix time + microseconds as in gettimeofday) before each line. the number is the miroseconds, having been left untouched by awk.
Nov 16 21:09:35 .:mingdao:.	Really, I shouldn't even be involved in this.  And no matter what I ever suggest, these people are almost all Windows migrants who do the darndest things to make it like they're accustomed to from The Dark Side.
Nov 16 21:10:12 .:Earnestly:.	mingdao: Well at least you can suggest from authority of standards, such as RFC3339
Nov 16 21:10:12 .:Friithian:.	oh just store it as an int that then overflows after a specific yea- wait that's already happened
Nov 16 21:11:02 .:Earnestly:.	mingdao: And note that both rfc3339 (which is basically sane subset of ISO8601, also not ISO) and iso8601 are lexicographically sortable
Nov 16 21:11:27 .:Earnestly:.	(subset except for the optionality of the T)
Nov 16 21:13:34 .:emanuele6:.	https://ijmacd.github.io/rfc3339-iso8601/
Nov 16 21:15:05 .:Friithian:.	there's no good reason to not store datetime in ISO8601 (or rfc3339, although I am not familiar with rfc's version)
Nov 16 21:15:07 .:mingdao:.	thanks Earnestly tirnanog emanuele6
Nov 16 21:16:12 .:Earnestly:.	Friithian: It's just YYYY-mm-dd[T]HH:MM:SSZ, without the rest, and also not ISO (which are closed source standards)
Nov 16 21:16:21 .:sl1200:.	hi
Nov 16 21:16:22 .:Earnestly:.	Or see emanuele6's link above
Nov 16 21:16:48 .:Friithian:.	Earnestly: ah cool, so they're essentially the same
Nov 16 21:17:08 .:Earnestly:.	Friithian: Well, for that particular date format.  ISO8601 has a lot more
Nov 16 21:17:27 .:Friithian:.	prob better to say the ISO is a superset of the rfc?
Nov 16 21:17:49 .:emanuele6:.	not quite
Nov 16 21:19:10 .:Earnestly:.	Friithian: rfc3339 is: [YYYY-mm-dd][Tt ][HH:MM:SS][zZ|[+-nn:nn] ... basically
Nov 16 21:19:26 .:Earnestly:.	Either way, it's the useful bits and also RFC
Nov 16 21:24:13 .:docmax:.	hi, how do i "inverse" the output of lines from asc to desc?
Nov 16 21:24:23 .:docmax:.	not sorting
Nov 16 21:24:31 .:Earnestly:.	!tac > docmax
Nov 16 21:24:31 .:greybot:.	docmax: tac(1) is a non-standard GNU-only command. A POSIX equivalent would be awk '{a[i++]=$0} END {while (i--) print a[i]}'
Nov 16 21:25:38 .:emanuele6:.	!emanuele6bashrematch_tac
Nov 16 21:25:38 .:greybot:.	51# push () { local BASH_REMATCH a; for a do [[ $a =~ .* ]]; done ;}; pop () { local i; for (( i = (${1-1}); i; --i )); do printf '%s\n' "$BASH_REMATCH"; unset -v BASH_REMATCH; done ;}; bashrematch_tac () { local REPLY i=0; while read -r; do push "$REPLY"; let ++i; done; printf '%s' "$REPLY"; pop "$i" ;}; printf '%s\n' a b c | bashrematch_tac
Nov 16 21:25:42 .:shbot:.	greybot: c
Nov 16 21:25:42 .:shbot:.	greybot: b
Nov 16 21:25:42 .:shbot:.	greybot: a
Nov 16 21:26:30 .:docmax:.	ah its "tac" never heart of it
Nov 16 21:26:41 .:docmax:.	thx
Nov 16 21:26:55 .:Friithian:.	oh wait is that just cat but in reverse
Nov 16 21:27:32 .:Earnestly:.	Friithian: Which would really be more like rev, but ho hum.  BSD uses tail -r and it is tail -r which might be included in POSIX
Nov 16 21:27:50 .:Earnestly:.	GNU tail doesn't implement -r, but it could since -r isn't used for anything
Nov 16 21:28:22 .:Friithian:.	everyone must do it differently
Nov 16 21:28:31 .:Earnestly:.	Well, GNU must
Nov 16 21:29:04 .:Earnestly:.	busybox tail doesn't have -r either, does have tac though
Nov 16 21:40:52 .:Guest2938:.	i have configuration line like          wrapper.java.additional.24="-XX:HeapDumpPath=%HEAP_DUMP_DIR%"
Nov 16 21:40:53 .:Guest2938:.	need to search -XX:HeapDumpPath and replace value after that.
Nov 16 21:42:45 .:Guest2938:.	"wrapper.java.additional.24" but it should be anything like "wrapper.java.additional.26" or "wrapper.java.additional.27" etc
Nov 16 21:45:02 .:Earnestly:.	Guest2938: Use a yaml parser that can query and update/modify it
Nov 16 21:45:34 .:Earnestly:.	(In a programmatic fashion)
Nov 16 21:46:17 .:Guest2938:.	can you point out any yaml parser in linux
Nov 16 21:46:37 .:Earnestly:.	I've given you several already
Nov 16 21:50:45 .:Guest2938:.	got it. let me try
Nov 16 21:51:57 .:lavaball:.	could i have the not .sh link?
Nov 16 21:53:17 .:djph:.	lavaball: ... what?
Nov 16 21:53:40 .:lavaball:.	there was link where it was explained why not to use the endings for bash scripts.
Nov 16 21:53:43 .:tirnanog:.	it's !.sh
Nov 16 21:53:46 .:lavaball:.	!.sh
Nov 16 21:53:47 .:greybot:.	Don't use extensions for your scripts. Scripts define new commands that you can run, and commands are generally not given extensions. Do you run ls.elf? Also: bash scripts are *not* sh scripts (so don't use .sh) and the extension will only cause dependencies headaches if the script gets rewritten in another language. See http://www.talisman.org/~erlkonig/documents/commandname-extensions-considered-harmful
Nov 16 21:54:35 .:lavaball:.	thank you so much.  also i'm sorry. i haven't been here in a while. well, idling but that's it. anyway. i'm preaching the gospel. so thanks again.
Nov 16 21:57:24 .:lavaball:.	oh, i meant sorry for not remembering the !.sh command. or mabye you have been missing me... who knows?
Nov 16 22:00:07 .:tirnanog:.	I wouldn't think an apology required for merely forgetting something. in any case, you can find the entire factoid database at http://wooledge.org/~greybot/.
Nov 16 23:03:56 .:userT:.	# if [ -n $str1 ]; then echo yes; else echo no; fi; str1=123; if [ -n $str1 ]; then echo yes; else echo no; fi
Nov 16 23:03:58 .:shbot:.	userT: yes
Nov 16 23:03:58 .:shbot:.	userT: yes
Nov 16 23:05:46 .:userT:.	Damn, my bad
Nov 16 23:05:53 .:userT:.	# if [ -n "$str1" ]; then echo yes; else echo no; fi; str1=123; if [ -n "$str1" ]; then echo yes; else echo no; fi
Nov 16 23:05:55 .:shbot:.	userT: no
Nov 16 23:05:55 .:shbot:.	userT: yes
Nov 16 23:06:04 .:userT:.	# if [ "$str1" ]; then echo yes; else echo no; fi; str1=123; if [ "$str1" ]; then echo yes; else echo no; fi
Nov 16 23:06:06 .:shbot:.	userT: no
Nov 16 23:06:06 .:shbot:.	userT: yes
Nov 16 23:06:11 .:userT:.	There it is.
Nov 16 23:06:49 .:llua:.	k
Nov 16 23:07:05 .:userT:.	So, actual question, isn't there any difference between specifying the "-n" part and not doing so?
Nov 16 23:08:27 .:llua:.	two less characters being typed
Nov 16 23:08:54 .:userT:.	llua: come on sir, without srcasms...
Nov 16 23:08:56 .:jetchisel:.	k
Nov 16 23:09:10 .:userT:.	*sarcasms
Nov 16 23:10:22 .:llua:.	the question isn't exactly coherent and i answered it withouut sarcasm to the best of my understand of it
Nov 16 23:11:09 .:userT:.	"Exactly coherent"? How would you expect me to ask better?
Nov 16 23:12:02 .:subopt:.	How can i 'watch' the stdout/stderr from a cmd until i see a certain token ('sim_start' in this case), and then redirect everything that follows to a file? Hoping i can pipe it to some unknown-to-me linux cmd that can help with this sort of thing. (btw, 'expect' is not an option.)
Nov 16 23:12:22 .:userT:.	The thing is, I really expected there to be some difference, even if in "orthodox" usage; because many devs out there just use them interchangably...
Nov 16 23:12:43 .:llua:.	and i mentioned the only difference i am aware of
Nov 16 23:13:25 .:userT:.	...
Nov 16 23:16:14 .:llua:.	welp.
Nov 16 23:17:09 .:Earnestly:.	I suspect they were incredulous lol
Nov 16 23:17:10 .:jetchisel:.	you scared them! ^^
Nov 16 23:17:40 .:Earnestly:.	> My whole life revolves around the use of -n and -z and you're telling me they're utterly redundant?  Do you have any idea what this means?!
Nov 16 23:23:39 .:Earnestly:.	subopt: I would write to stderr, and then when sim_start is seen, change it to stdout all while redirecting the whole thing to a file
Nov 16 23:25:46 .:Earnestly:.	I.e. something like: awk 'BEGIN {out = "/dev/stderr"} /sim_start/ {out = "/dev/stdout"} {print > out}' > file
Nov 16 23:27:00 .:Earnestly:.	subopt: Or if this is really a proper operation you might want to use tracing tools like EBPF's ttysnoop and co.
Nov 16 23:27:35 .:Earnestly:.	subopt: Or capture everything and process logs afterwards
Nov 16 23:28:21 .:Earnestly:.	Or even just read the log until sim_start is seen, then exit
Nov 17 00:11:56 .:subopt:.	Ernestly: Thanks a lot for the suggestions.
Nov 17 00:14:41 .:Earnestly:.	emg: Are you familar with zsh's time globs?
Nov 17 00:16:34 .:Earnestly:.	emg: If not, https://0x0.st/oIOL.txt
Nov 17 01:32:14 .:Filystyn:.	 var=wuj; if [[ "$var" = [ujw] ]]; then echo ok; fi
Nov 17 01:32:18 .:Filystyn:.	why it doe snot return ok
Nov 17 01:32:56 .:Nintendo:.	Earnestly, if there is a way to limit the number of glob results, those time globs could be really useful in readline bindings, e.g. \em or whatever to automatically insert the most recently modified file.
Nov 17 01:33:09 .:cryptonector:.	Filystyn: because that glob pattern matches one character only
Nov 17 01:33:29 .:cryptonector:.	but your $var is three characters
Nov 17 01:33:46 .:Filystyn:.	so
Nov 17 01:34:00 .:Filystyn:.	[w][u][j]
Nov 17 01:34:03 .:emanuele6:.	did you mean to use *[ujw]* ?
Nov 17 01:34:24 .:cryptonector:.	or +([juw]) or...
Nov 17 01:34:50 .:Filystyn:.	it should look if it poses those three characters
Nov 17 01:34:59 .:Filystyn:.	so var=wwwuuuuujjj would retrn ok
Nov 17 01:35:18 .:cryptonector:.	+([wuj])
Nov 17 01:35:31 .:cryptonector:.	search for extglob in the man page
Nov 17 01:35:50 .:cryptonector:.	extglobs are pretty nice
Nov 17 01:36:20 .:Filystyn:.	more like
Nov 17 01:36:26 .:Filystyn:.	*(w|u|j)
Nov 17 01:36:33 .:Filystyn:.	check mate atheists
Nov 17 01:36:43 .:cryptonector:.	oh, I see, runs of w u and j
Nov 17 01:37:23 .:cryptonector:.	+(w)+(u)+(j)
Nov 17 01:39:00 .:Filystyn:.	ah so + is like for omitting empty strings
Nov 17 01:39:12 .:emanuele6:.	!extglob
Nov 17 01:39:12 .:greybot:.	"Extended globs" (shopt -s extglob) allow you to say things like "all files that do not end in .jpg". See http://mywiki.wooledge.org/glob#extglob
Nov 17 01:39:52 .:emanuele6:.	+(w) is one or more matches of "w"  as opposed to *(w) which is zero or more matches of "w"
Nov 17 01:40:46 .:Filystyn:.	* is trollish
Nov 17 01:41:05 .:Filystyn:.	? and @ seem gold
Nov 17 01:41:17 .:Filystyn:.	and !
Nov 17 01:41:45 .:Filystyn:.	this is really good tbh
Nov 17 01:42:06 .:Filystyn:.	I feel now overpowered
Nov 17 01:43:21 .:Filystyn:.	thx for help kind people
Nov 17 01:44:09 .:Filystyn:.	one more question it appears I can read fle fd in shell. how do you read fd when you open a file
Nov 17 01:45:37 .:emanuele6:.	if you are asking how do i open a file an get a file descriptor; you can use    exec {fd}> "$file"
Nov 17 01:46:22 .:Filystyn:.	and it will work with <&
Nov 17 01:46:36 .:Filystyn:.	just like with some basic redirects stderr to stdin
Nov 17 01:47:23 .:emanuele6:.	`fd' is the name of the variable in which the file descriptor should be saved, `>' is the open mode (i can be > write, truncate, creat; < read only; <> read write; >> write, append, creat), and file is the file name
Nov 17 01:47:51 .:Filystyn:.	Ok, I am going to pray and sleep
Nov 17 01:47:55 .:Filystyn:.	enoguht for today
Nov 17 01:48:00 .:emanuele6:.	if you want to redirect a file descriptor in a variable to stdin, you would use   <&"$fd"
Nov 17 01:48:04 .:Filystyn:.	good night everyone and thx for answers
Nov 17 01:48:14 .:Filystyn:.	ill note that emanuele^
Nov 17 01:48:48 .:emanuele6:.	s/redirect/duplicate to/
Nov 17 01:49:02 .:emanuele6:.	err
Nov 17 01:49:30 .:emanuele6:.	s/redirect/duplicate/ # :)
Nov 17 02:19:13 .:kurahaupo_:.	Filystyn: [[ $var != *[!juw]* ]]
Nov 17 02:28:28 .:ngelover:.	is there any way to undo alias alias='' ?
Nov 17 02:28:48 .:emanuele6:.	unalias alias
Nov 17 02:28:58 .:ngelover:.	damn
Nov 17 02:31:42 .:ngelover:.	how do you undo alias unalias='' though
Nov 17 02:32:15 .:ngelover:.	nvm it works for some reason
Nov 17 02:32:16 .:emanuele6:.	\unalias unalias
Nov 17 02:32:20 .:emanuele6:.	'unalias' unalias
Nov 17 02:32:27 .:emanuele6:.	un'a'li\as unalias
Nov 17 02:32:29 .:emanuele6:.	pick one
Nov 17 02:32:34 .:ngelover:.	lol thx
Nov 17 02:32:42 .:phy1729:.	But the person abusing aliases into a straight jacket
Nov 17 02:33:00 .:emanuele6:.	ngelover: even   unalias unalias unalias   would work in this case
Nov 17 02:33:25 .:emanuele6:.	it would not work if you had  alias unalias=' '  but since you used '' it works
Nov 17 02:34:44 .:djph:.	pretty sure you can also use \command to get around the alias ...
Nov 17 02:35:02 .:emanuele6:.	was that not mentioned?
Nov 17 02:36:59 .:emanuele6:.	oh, actually nevermind.  unalias unalias unalias  doesn't work
Nov 17 02:37:37 .:emanuele6:.	i didn't know that an empty alias works as an alias that ends in a space
Nov 17 02:39:17 .:emanuele6:.	> If the value of the alias replacing the word ends in a <blank>, the shell shall check the next command word for alias substitution; this process shall continue until a word is found that is not a valid alias or an alias value does not end in a <blank>.
Nov 17 02:39:22 .:djph:.	emanuele6: no?  maybe?  I think IRC here lost a few things if it was said
Nov 17 02:39:35 .:phy1729:.	# alias foo=echo; eval '"" foo bar'
Nov 17 02:39:37 .:shbot:.	phy1729: bash: : command not found
Nov 17 02:40:00 .:emanuele6:.	from the POSIX description it sounds like that should not happen, but dash has the same behaviour
Nov 17 02:40:02 .:phy1729:.	I guess the null alias kinda makes sense still since it's so eearly
Nov 17 02:40:25 .:emanuele6:.	# alias foo='' echo='echo xd'; eval 'foo echo hi'
Nov 17 02:40:32 .:shbot:.	emanuele6: xd hi
Nov 17 02:40:35 .:emanuele6:.	d# alias foo='' echo='echo xd'; eval 'foo echo hi'
Nov 17 02:40:42 .:shbot:.	emanuele6: xd hi
Nov 17 02:41:02 .:emanuele6:.	djph: <emanuele6 > \unalias unalias
Nov 17 02:42:07 .:emanuele6:.	i would expect that to print "xd hi", if foo is ' ', but not if foo is '': i would expect "hi" in that case
Nov 17 02:42:40 .:emanuele6:.	same behaviour on ksh :/
Nov 17 02:43:01 .:emanuele6:.	i guess that is the de facto behaviour of empty aliases even though it doesn't match POSIX's description
Nov 17 02:48:43 »»	Disconnected ().
**** ENDING LOGGING AT Thu Nov 17 02:48:43 2022

**** BEGIN LOGGING AT Thu Nov 17 02:49:03 2022

Nov 17 02:54:22 »»	Now talking on #bash
Nov 17 02:54:22 »»	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | https://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Nov 17 02:54:22 »»	Topic for #bash set by twkm at Fri May 21 00:17:30 2021
Nov 17 02:58:27 .:djph:.	emanuele6: so it was :/
Nov 17 03:03:29 .:cornfeedhobo:.	# printf '%s\n' 'foobar'
Nov 17 03:03:31 .:shbot:.	cornfeedhobo: foobar
Nov 17 03:03:42 .:cornfeedhobo:.	why does this hang when entered in on the terminal manually?
Nov 17 03:04:35 .:emanuele6:.	i have also tried busybox, pdksh, mksh and even zsh. they all do the same thing. and the ksh manual says "If the last character of the alias value is a blank then" which again excludes empty strings :|
Nov 17 03:05:29 .:emanuele6:.	cornfeedhobo: when does that happen?
Nov 17 03:09:36 .:cornfeedhobo:.	so strange. only on a single host of mine
Nov 17 03:09:46 .:cornfeedhobo:.	when in the bash repl
Nov 17 03:10:25 .:emanuele6:.	can you tell more about that bash session?
Nov 17 03:10:51 .:emanuele6:.	is it via ssh? is it started by a script? is it using a weird terminal emulator?
Nov 17 03:11:00 .:emanuele6:.	is printf aliased?
Nov 17 03:11:16 .:cornfeedhobo:.	it's just a local bash shell. normal kde konsole emulator. i'm going to chalk this up to some enterprise monitoring something catching the command
Nov 17 03:11:25 .:cornfeedhobo:.	disregard me
Nov 17 03:15:40 .:emanuele6:.	i also checked the manual pages of bash, zsh (zshmisc) and mksh and they all use that wording that excludes the empty string :/
Nov 17 03:15:59 .:emanuele6:.	and the dash man page does not even explain alias expansions
Nov 17 05:00:13 »»	Disconnected ().
**** ENDING LOGGING AT Thu Nov 17 05:00:13 2022

**** BEGIN LOGGING AT Thu Nov 17 05:04:10 2022

Nov 17 05:09:29 »»	Now talking on #bash
Nov 17 05:09:29 »»	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | https://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Nov 17 05:09:29 »»	Topic for #bash set by twkm at Fri May 21 00:17:30 2021
Nov 17 08:43:43 .:jmike__:.	how do you learn all that square bracket star at sign percentage sign stuff
Nov 17 08:44:29 .:jmike__:.	i'm kind of incidentally bumping n-to it by doing tuts, but I'm not getting shatzon with a flood of n-fo.
Nov 17 08:44:37 .:larryv:.	wat
Nov 17 08:45:07 .:jmike__:.	Uh, sorry. I'm studying Dutch. I'm just wondering how you figure out things like this: ${dirs[@]/%/newrep}
Nov 17 08:45:43 .:jmike__:.	are all of those symols classified as operators or something?
Nov 17 08:46:11 .:emanuele6:.	!pe
Nov 17 08:46:12 .:greybot:.	Parameter Expansion expands parameters: "$foo", "$1". You can use it to perform string or array operations: "${file%.mp3}", "${0##*/}", "${files[@]: -4}". They should *always* be quoted. See: http://mywiki.wooledge.org/BashFAQ/073 and "Parameter Expansion" in man bash. Also see http://wiki.bash-hackers.org/syntax/pe.
Nov 17 08:46:17 .:llua:.	shockingly, reading documentation
Nov 17 08:46:29 .:llua:.	like the man page
Nov 17 08:46:37 .:emanuele6:.	don't figure them out, instead read the documentation and learn how they work.
Nov 17 08:47:39 .:jmike__:.	oh they're all subcomponents of expansion.  i see.
Nov 17 08:48:29 .:jmike__:.	I already read that page, my notetaking just isn't very good.  I'm reading about globbing and it's coming up a lot.
Nov 17 08:49:38 .:emanuele6:.	if you read the bash manual directly, you will see this  https://0x0.st/oIJU.txt .
Nov 17 08:51:24 .:jmike__:.	Man, I need to write my own manual.  Some of these sentences are supergruff.
Nov 17 08:51:29 .:jmike__:.	 If pattern begins with /,  all  matches
Nov 17 08:51:29 .:jmike__:.	              of  pattern  are  replaced with string.
Nov 17 08:52:06 .:jmike__:.	that's like /s:replace this/with this/ probably
Nov 17 08:52:12 .:emanuele6:.	so "${dirs[@]/%/newrep}" applies, to all members of the dirs array ("If parameter is an array variable subscripted with @ or *, the substitution operation is applied to each member of the array in turn, and the expansion is the resultant list."), the substitution, of the word '' (empty string) at the end of the string ("If pattern begins with %, it must match at the end of the expanded value of
Nov 17 08:52:14 .:emanuele6:.	parameter."), with newrep.
Nov 17 08:52:57 .:jmike__:.	Are @ and * synonymous?
Nov 17 08:53:46 .:yitz:.	!$*
Nov 17 08:53:46 .:greybot:.	The difference between $@ and $*: "$@" (quoted) expands to each positional parameter as its own argument: "$1" "$2" ... while "$*" expands to the single argument "$1c$2c..." where c is the first character of IFS. You almost always want "$@". The same goes for arrays: "${array[@]}" or "${array[*]}". Unquoted $* and $@ are undefined; DO NOT use.
Nov 17 08:53:58 .:emanuele6:.	# dirs=( a/ b/ c/ ) new_dirs=( "${dirs[@]/%/newrep}" ); declare -p dirs new_dirs
Nov 17 08:54:00 .:shbot:.	emanuele6: declare -a dirs=([0]="a/" [1]="b/" [2]="c/")
Nov 17 08:54:01 .:shbot:.	emanuele6: declare -a new_dirs=([0]="a/newrep" [1]="b/newrep" [2]="c/newrep")
Nov 17 08:54:31 .:emanuele6:.	jmike__: they are not, it is a explained a few paragraphs above in that one in the bash manual page
Nov 17 08:55:14 .:jmike__:.	I wish the bot posted the url it's reading from let me go find it
Nov 17 08:55:57 .:emanuele6:.	!metaurl $*
Nov 17 08:55:57 .:greybot:.	https://wooledge.org/~greybot/meta/$*
Nov 17 08:56:02 .:emanuele6:.	not sure what you need that for
Nov 17 08:56:10 .:larryv:.	the factoids are written by people here. they are not all excerpted from other sources
Nov 17 08:56:33 .:jmike__:.	oh.  yeah i was wondering why it didn't come up in bashman
Nov 17 08:56:54 .:jmike__:.	!IFS
Nov 17 08:56:55 .:greybot:.	Internal Field Separator (or Input Field Separator), used to break things into words. See http://mywiki.wooledge.org/IFS and http://mywiki.wooledge.org/BashFAQ/001 and https://wiki.bash-hackers.org/syntax/words
Nov 17 08:58:03 .:jmike__:.	!???
Nov 17 08:58:21 .:jmike__:.	Is there a dif ??? and *?
Nov 17 08:58:50 .:emanuele6:.	is that also dutch?
Nov 17 08:59:17 .:jmike__:.	??? matches single characters; * matches strings.
Nov 17 08:59:22 .:larryv:.	there is nothing special in those globs. if you know what * and ? mean, then that's all you need
Nov 17 08:59:47 .:jmike__:.	!?
Nov 17 08:59:47 .:greybot:.	A question mark indicates a sentence is a question. When you see a sentence directed at you terminated with this symbol, somebody has asked you a question and is waiting for you to answer it.
Nov 17 08:59:57 .:larryv:.	you can /msg greybot privately.
Nov 17 08:59:57 »»	jmike__ giggles at greybot .
Nov 17 09:00:06 .:jmike__:.	okay I will.
Nov 17 09:00:41 .:larryv:.	??? matches exactly three characters. *? matches one or more characters
Nov 17 09:00:57 .:jmike__:.	See, this is where you lose me.
Nov 17 09:01:06 .:jmike__:.	Because why not just write *?
Nov 17 09:01:09 .:jmike__:.	A string is one or more characters.
Nov 17 09:01:15 .:larryv:.	no.
Nov 17 09:01:27 .:jmike__:.	Isn't a string an array of chracters in bash?
Nov 17 09:01:29 .:larryv:.	the term "string" is basically meaningless in shell. basically everything is a "string"
Nov 17 09:01:39 .:larryv:.	* matches zero or more characters
Nov 17 09:03:38 .:larryv:.	also i don't know where you're getting that definition of "string". you can usually have zero-length strings.
Nov 17 09:15:45 .:whatsupdoc:.	how do i apply chmod 644 to all files in a tree of folders of some folder name testing
Nov 17 09:17:11 .:whatsupdoc:.	I would think it's  `chmod -R 644 folder_name` but then none of the folders open
Nov 17 09:17:56 .:emanuele6:.	probably with   find folder_name -name somepatternhere -exec chmod -- 644 {} +
Nov 17 09:22:20 .:emanuele6:.	or  find folder_name ! -name somepatternhere -type d -prune -o chmod -- 644 {} +   if you mean that you only want to check the name of subdirectories in folder_name, and run chmod on the files they contain (and you don't want to run chmod on e.g. /baddirname/gooddirname/file).
Nov 17 09:22:45 .:emanuele6:.	in any case, probably some kind of find command that runs -exec chmod ... {} +
Nov 17 09:22:46 .:emanuele6:.	!find
Nov 17 09:22:47 .:greybot:.	http://mywiki.wooledge.org/UsingFind
Nov 17 09:24:54 .:whatsupdoc:.	oh i see thanks
Nov 17 09:25:17 .:jmike__:.	Maybe you can use braced permutations?  echo {a/b}/{c/d} = a/c, a/d, b/c, b/d?  Or some other bracket pattern
Nov 17 09:25:38 .:jmike__:.	./treeproject/{dir1, dir2, dir3}
Nov 17 09:50:43 »»	Disconnected ().
**** ENDING LOGGING AT Thu Nov 17 09:50:43 2022

**** BEGIN LOGGING AT Thu Nov 17 09:54:09 2022

Nov 17 09:59:28 »»	Now talking on #bash
Nov 17 09:59:28 »»	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | https://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Nov 17 09:59:28 »»	Topic for #bash set by twkm at Fri May 21 00:17:30 2021
Nov 17 10:03:08 »»	AyLaa23 hi
Nov 17 10:04:32 »»	AyLaa23 https://t.ly/orB1
Nov 17 12:08:49 .:isabella:.	i was expecting a website that sells viagra and now i'm sad
Nov 17 12:10:09 .:selckin:.	just stole all your passwords
Nov 17 13:27:43 »»	Disconnected ().
**** ENDING LOGGING AT Thu Nov 17 13:27:43 2022

**** BEGIN LOGGING AT Thu Nov 17 13:31:49 2022

Nov 17 13:37:09 »»	Now talking on #bash
Nov 17 13:37:09 »»	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | https://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Nov 17 13:37:09 »»	Topic for #bash set by twkm at Fri May 21 00:17:30 2021
Nov 17 13:57:18 .:ham5urg:.	'exec {A_VAR}' works but 'exec {ASSO[ARRAY]}' does not. Why is that?
Nov 17 14:00:21 .:Guest8578:.	.greybot -e
Nov 17 14:00:37 .:Guest8578:.	.greybot set-e
Nov 17 14:00:54 .:Soliton:.	# (exec {A_VAR}); (exec {ASSO[ARRAY]})
Nov 17 14:00:57 .:shbot:.	Soliton: bash: exec: {A_VAR}: not found
Nov 17 14:00:57 .:shbot:.	Soliton: bash: exec: {ASSO[ARRAY]}: not found
Nov 17 14:01:06 .:Soliton:.	no clue what either should do.
Nov 17 14:01:45 .:Soliton:.	are you trying to access a variable with a command name as value?
Nov 17 14:06:31 .:woland:.	!check
Nov 17 14:11:52 .:checkbot:.	emanuele6: Line 11: This is interpreted as a command name ending with '.'. Double check syntax. Line 1: parameter is referenced but not assigned. Line 17: Use ./*glob* or -- *glob* so names with dashes won't become options. See https://shellcheck.net/?id=cb81712 for all 5 issues.
Nov 17 14:07:41 .:woland:.	sorry just wanted the link 
Nov 17 15:06:24 .:olspookishmagus:.	I run into a problem but I've successfully debugged it myself, how about that? ^^
Nov 17 15:13:09 .:osse:.	Have a cookie.
Nov 17 15:44:11 .:iateadonut:.	NO!  do NOT have a cookie!  let the activity be the reward itself, or else you'll lose motivation and burnout!
Nov 17 15:46:43 .:jelly:.	you are a whole donut and wouldn't allow us a mere cookie
Nov 17 15:46:46 .:jelly:.	ate*
Nov 17 15:47:06 .:jelly:.	but possibly are* as well, I don't judge
Nov 17 15:55:35 .:olspookishmagus:.	C is for cookie, that's good enough for me
Nov 17 15:59:39 .:wyre:.	hi guys, not sure if this https://bpa.st/IHTQ will work or if I should export some_file as I'm running grep in a child shell(?)
Nov 17 16:00:00 .:Soliton:.	!check
Nov 17 16:00:01 .:checkbot:.	wyre: Line 3: value appears unused. Verify use (or export if used externally). See https://shellcheck.net/?id=cb88201
Nov 17 16:00:07 .:depesz:.	how can I get epoch of when given process (i have pid) started?
Nov 17 16:00:13 .:Soliton:.	quote the variable expansion.
Nov 17 16:00:20 .:depesz:.	or, how can I check if given process is running for more than 48 hours
Nov 17 16:00:32 .:depesz:.	also, sorry, hi, how are you?
Nov 17 16:00:34 .:Soliton:.	variables are available in subshells. export is for child processes.
Nov 17 16:01:02 .:wyre:.	Soliton, you mean like this? https://bpa.st/7ILQ
Nov 17 16:01:27 .:wyre:.	Soliton, oh, so this is a subshell not a child shell/process, ain't it?
Nov 17 16:01:36 .:Soliton:.	yes. also grep -r is non-standard.
Nov 17 16:01:50 .:Soliton:.	yes, a subshell.
Nov 17 16:02:43 .:Soliton:.	in what grep version does -r with a filename make sense anyway?
Nov 17 16:03:49 .:wyre:.	sure, that's my bad 😊
Nov 17 16:04:35 .:selckin:.	depesz: bit hacky maybe and not sure how portable date -r /proc/$pid +%s
Nov 17 16:04:41 .:geirha:.	and why are you including the line number? is there a sed-injection later on?
Nov 17 16:04:56 .:depesz:.	selckin: ooh. that's nice. checking.
Nov 17 16:06:10 .:geirha:.	If it's bash, the special SECONDS variable is set to 0 at the start of the shell, and SECONDS increments every second
Nov 17 16:06:43 .:geirha:.	# bash -c 'declare -p SECONDS'
Nov 17 16:06:45 .:shbot:.	geirha: declare -i SECONDS="0"
Nov 17 16:06:49 .:geirha:.	# bash -c 'sleep 2 ; declare -p SECONDS'
Nov 17 16:06:50 .:depesz:.	selckin: it shows me bad time: https://dpaste.org/oBEbn
Nov 17 16:06:55 .:shbot:.	geirha: declare -i SECONDS="2"
Nov 17 16:10:24 .:tirnanog:.	# sleep 2; pid=1; ps -p "$pid" -o etimes= # procps-ng
Nov 17 16:10:29 .:shbot:.	tirnanog:       7
Nov 17 16:11:12 .:depesz:.	tirnanog: that's amazing. thanks s lot.
Nov 17 16:12:06 .:selckin:.	cunningham++
Nov 17 16:17:19 .:Soliton:.	i get 0 most of the time.
Nov 17 16:29:20 .:olspookishmagus:.	$ ( for hour in {0..23} ; do for minute in {0..59} ; do for second in {0..59} ; do for microsecond in {0..999} ; do printf "%02d\t%02d\t%02d.%03d\n" "$hour" "$minute" "$second" "$microsecond" ; done ; done ; done ; done ) > hours_minutes_seconds_microseconds.txt
Nov 17 16:29:27 .:olspookishmagus:.	I couldn't think of anything more efficient
Nov 17 16:30:30 .:geirha:.	what about leap seconds?
Nov 17 16:30:50 .:olspookishmagus:.	what is time? https://www.youtube.com/watch?v=U3lWVLuc6CE
Nov 17 16:37:07 .:olspookishmagus:.	I wonder if: splitting that process to parallel subprocesses, then sort the output, would've been faster
Nov 17 16:50:38 .:tirnanog:.	perl manages it in 38 seconds on my slow system. I tried gawk and nawk (both of which will almost certainly be faster than bash) but got bored of waiting.
Nov 17 16:52:59 .:tirnanog:.	ok. nawk clocked in at 1m33s.
Nov 17 17:04:43 .:Earnestly:.	tirnanog: nawk doesn't optimise foo = foo "bar" type concatenation, so in a real example nawk will take 30 minutes while mawk will take seconds
Nov 17 17:05:14 .:tirnanog:.	Earnestly: I used printf. will give mawk a spin.
Nov 17 17:06:25 .:tirnanog:.	so far, perl is the winner of perl, mawk, gawk and python. I'm not even going to try to benchmark bash. I know it will be dreadfully slow.
Nov 17 17:06:53 .:tirnanog:.	Earnestly: make came in at a little over 48s. not too shabby.
Nov 17 17:06:57 .:tirnanog:.	mawk, sorry.
Nov 17 17:07:29 .:Earnestly:.	It's great, although the latest one is segfaulting randomly for me with -W interactive and the backtraces aren't that useful
Nov 17 17:07:59 .:tirnanog:.	Earnestly: present affairs of stability aside, are they any notable downsides to mawk?
Nov 17 17:08:17 .:tirnanog:.	man alive. I cannot type today.
Nov 17 17:08:53 .:Earnestly:.	None that I've encountered, there are apparently cases where it's not quite right posix (has -W posix for that) but I can't remember it just now
Nov 17 17:09:25 .:tirnanog:.	"forces mawk not to consider '\n' to be space". ok.
Nov 17 17:10:13 .:Earnestly:.	tirnanog: emanuele6 is more aware of the differences or potential bugs
Nov 17 17:11:53 .:Earnestly:.	tirnanog: https://github.com/ThomasDickey/mawk-snapshots - is where you can get the latest, in git form
Nov 17 17:12:27 .:tirnanog:.	Earnestly: thanks.
Nov 17 17:12:28 .:Earnestly:.	tirnanog: Ah yes, that was a big one, its ERE doesn't support braces
Nov 17 17:12:50 .:Earnestly:.	(The built-in one anyway)
Nov 17 17:13:06 .:Earnestly:.	I wonder if the README has been updated...
Nov 17 17:13:53 .:Earnestly:.	tirnanog: Yeah braces seem to work these days, README is old
Nov 17 17:14:00 .:tirnanog:.	ah. splendid.
Nov 17 17:14:02 .:Earnestly:.	# printf '%s\n' 1234 foo barbaz | mawk '/^.{3}$/'
Nov 17 17:14:04 .:shbot:.	Earnestly: no output
Nov 17 17:14:28 .:Earnestly:.	# mawk -W version 2> /dev/null | head -n 1
Nov 17 17:14:30 .:shbot:.	Earnestly: mawk 1.3.4 20200120
Nov 17 17:15:05 .:Earnestly:.	tirnanog: Current is roughly: mawk 1.3.4 20210824 - I had to /dev/null as it used to print other info on stderr
Nov 17 17:15:16 .:tirnanog:.	Earnestly: I see.
Nov 17 17:15:58 .:Earnestly:.	It doesn't anymore, which is nice.  geirha could mawk get an upgrade on shbot next rebuild?
Nov 17 17:16:43 .:Earnestly:.	tirnanog: Maybe I speak too soon, it has some brace support but: https://0x0.st/oIwx.txt
Nov 17 17:17:23 .:geirha:.	I need to build new bash 5.2 anyway, so I'll try to bump mawk at the same time, but will probably not get around to it until the weekend
Nov 17 17:18:27 .:Earnestly:.	> https://github.blog/2022-10-18-git-security-vulnerabilities-announced/#cve-2022-39253
Nov 17 17:18:41 .:Earnestly:.	> fatal: transport 'file' not allowed
Nov 17 17:18:54 .:Earnestly:.	geirha: No hurry, thanks
Nov 17 17:22:17 .:olspookishmagus:.	great, now I have a 1123200000 file that I'm supposed to use as INPUT somewhere
Nov 17 17:22:36 .:olspookishmagus:.	:,-1s/file/bytes long file/
Nov 17 17:23:12 .:Earnestly:.	Git is refusing me even though the objects directory has no symlinks
Nov 17 17:27:30 .:geirha:.	must be that protocol.file.allow settings it's talking about
Nov 17 17:27:39 .:geirha:.	try setting it to "always"
Nov 17 17:28:07 .:olspookishmagus:.	so I guess in order to produce nicely formatted output every time, arrays is the way to go (so that you can get the maximum number of positions required, etc etc)
Nov 17 17:28:43 .:geirha:.	or env var GIT_PROTOCOL_FROM_USER=1 apparently
Nov 17 17:28:59 .:geirha:.	Earnestly: https://git-scm.com/docs/git-config#Documentation/git-config.txt-protocolallow
Nov 17 17:29:46 .:olspookishmagus:.	or use printf
Nov 17 17:29:48 .:Earnestly:.	geirha: Yeah I've used git -c protocol.file.allow=always submodule update ... but it seems odd that they'd mention the presence of symlinks as a sentinel but then disallow it flat out
Nov 17 17:30:05 .:Earnestly:.	geirha: It would be nice if they honoured that claim, that if there are no symlinks (hardlinks?) it'll allow it
Nov 17 17:31:03 .:Earnestly:.	But the option is now: "either trust fully or not at all", where if they did do symlink checking you could disallow potentially harmful clones while allowing the harmless
Nov 17 17:32:38 .:olspookishmagus:.	$ for webp_file in *.webp ; do printf "%-32s\t" "$webp_file" ; webp_file_alpha=$( identify -format '%A' "$webp_file" ) ; webp_file_opaque=$( identify -format '%[opaque]' "$webp_file" ) ; printf "%-16s\t" "$webp_file_alpha" ; printf "%-8s" "$webp_file_opaque" ; echo ; done
Nov 17 17:33:26 .:Earnestly:.	It's a pity that indentify can't use nul termination, as otherwise you could dispense with virtually all of that code
Nov 17 17:33:46 .:Earnestly:.	It could do both detection of webp and the formatted prints, all in one go, without executing it multiple times in a for loop
Nov 17 17:34:19 .:Earnestly:.	three subshells and three forks of indentify in a for loop is just brutal
Nov 17 17:34:31 .:olspookishmagus:.	now I'm looking into: 'convert ... -verbose info:'
Nov 17 17:35:08 .:Earnestly:.	I tried to add nul termination but it uses cstrings everywhere
Nov 17 17:35:25 .:olspookishmagus:.	which is closer to what I'm trying to achieve cause some WEBP have alpha channels but they are of no use
Nov 17 17:35:48 .:olspookishmagus:.	all this because some *BEEEEEP* decided that WEBP should be the new standard
Nov 17 17:41:15 .:tirnanog:.	pardon me but that code is disgustingly inefficient.
Nov 17 17:41:45 .:amosbird:.	Hello! How can I execute a binary with stdin redirect to a file, and fd 3 redirect to another file?
Nov 17 17:42:01 .:amosbird:.	Using two input files for the executable
Nov 17 17:42:17 .:tirnanog:.	olspookishmagus: perhaps you have column(1) from util-linux available. printf '%s\0' *.webp | xargs -0 identify -format $'%f\t%A\t%[opaque]\n' -- | column -t
Nov 17 17:42:25 .:emanuele6:.	the_binary its arguments < one_file 3< the_other_file
Nov 17 17:42:40 .:amosbird:.	thanks
Nov 17 17:47:52 .:Earnestly:.	tirnanog: Oh you know what.  exiftool!
Nov 17 17:48:58 .:Earnestly:.	tirnanog: identify can do detection, you can print the format like [WEBP] or so.  But it doesn't handle newlines in filenames and has no nul -0 type flag (and can't easily be added since they use cstrings everywhere).  It can also do, iirc, printf style padding.  However, exiftool could probably do all of this...
Nov 17 17:49:16 .:Earnestly:.	tirnanog: (Oh and identify could take multiple arguments too)
Nov 17 17:49:43 .:tirnanog:.	yes, that's why I used a printf/xargs combo there.
Nov 17 17:50:01 .:tirnanog:.	anyway, sounds good. the man page for exiftool is certainly more helpful.
Nov 17 17:50:14 .:Earnestly:.	olspookishmagus: Can you give me example of webp with alpha channels?
Nov 17 17:50:38 .:Earnestly:.	exiftool is a bit of a monster but extremely useful once you learn it
Nov 17 17:51:05 .:tirnanog:.	Earnestly: https://www.gstatic.com/webp/gallery3/1_webp_a.webp
Nov 17 17:51:27 .:Earnestly:.	> [RIFF]          WebP_Flags                      : Alpha
Nov 17 17:51:49 .:Earnestly:.	So it could be used then
Nov 17 17:53:28 .:tirnanog:.	Earnestly: the issue with newlines is appalling. I was wholly unaware.
Nov 17 17:53:46 .:tirnanog:.	oh wait. actually, it seems to work.
Nov 17 17:53:56 .:tirnanog:.	what's the problem meant to be?
Nov 17 17:54:21 .:Earnestly:.	olspookishmagus: Some notes on exiftool when I was exploring it for metadata management: https://0x0.st/oIxq.txt
Nov 17 17:55:28 .:olspookishmagus:.	Earnestly: not now, will do later, ok?
Nov 17 17:55:35 .:olspookishmagus:.	I really enjoy your note collections
Nov 17 17:55:47 .:Earnestly:.	tirnanog: The -format flag for identify doesn't support \0 iirc
Nov 17 17:56:32 .:tirnanog:.	Earnestly: yes. that is irksome.
Nov 17 17:57:26 .:amosbird:.	emanuele6: what's the name of this feature?
Nov 17 17:57:35 .:emanuele6:.	!redirection > amosbird
Nov 17 17:57:35 .:greybot:.	amosbird: Redirections: http://mywiki.wooledge.org/Redirection
Nov 17 17:57:42 .:olspookishmagus:.	Earnestly: here, this will download as WEBP: https://res.cloudinary.com/Sony-liv/image/fetch/c_fill,e_contrast:30,f_auto,fl_lossy,q_auto:low/e_brightness:10/https://origin-staticv2.sonyliv.com/masthead_logo/PrimeTime_800x800masthead-logo.png
Nov 17 17:57:46 »»	olspookishmagus giggles
Nov 17 18:00:18 .:Earnestly:.	olspookishmagus: This is why I would have liked to use identify with its %m attribute to detect the actual imagetype rather than depending on extension
Nov 17 18:00:43 .:olspookishmagus:.	Earnestly: https://upload.disroot.org/r/fMp1gSA4#g0c0KuK10ZcdJqtQsCko1Dh5GUZ1Og1qK6FgP5HyPLo=
Nov 17 18:00:49 .:emanuele6:.	amosbird: < is short for 0<  <> is short for 0<>  > is short for 1>    num< file    means open file with O_RDONLY on file descriptor num (a value 0 to 9, in bash you can use any number as an extension). you can use instead of <,  > for O_WRONLY|O_CREAT|O_TRUNC  >> for O_WRONLY|O_CREAT|O_APPEND  <> for O_RDWR|O_CREAT
Nov 17 18:01:55 .:olspookishmagus:.	Earnestly: and an example of a WEBP claiming it has alpha channel but I don't see the use of its alpha channel: https://upload.disroot.org/r/50nhVKGU#hoZeFcXHLHEvNBhXnkKPdDQyQ/jK9RDFM6uLQEei1hg=
Nov 17 18:02:59 .:emanuele6:.	there is also  n>&m   where n and m are numbers (between 0 to 9 in posix, any number in bash) to dup2 the file descriptor from n on m;   and you can use n>&- to close file descriptor n,   in bash you can also use n>&m- which is short for n>&m n>&- ("move file descriptor")
Nov 17 18:03:51 .:emanuele6:.	you can use either <& or >& for these redirections, there is no difference except that if you omit n, 0 is assumed if you used < and 1 is assumed if you used >
Nov 17 18:04:16 .:Earnestly:.	tirnanog: Also magick's @- and such for reading filelists from stdin (which identify and co. support don't support nul delimited input afaict)
Nov 17 18:05:16 .:emanuele6:.	you must not write e.g.  >& 3    it must be  >&3   otherwise bash reads it as  >& file  which is special syntax short for > file 2>&1
Nov 17 18:05:24 .:emanuele6:.	but see the wiki page for more info
Nov 17 18:06:11 .:Earnestly:.	tirnanog: Oh, it can take filenames enclosed in quotes it seems
Nov 17 18:09:11 .:Earnestly:.	tirnanog: Embeded 's don't seem to be escapable
Nov 17 18:11:15 .:Earnestly:.	olspookishmagus: The upshot is, exiftool
Nov 17 18:11:30 .:tirnanog:.	Earnestly: hmm.
Nov 17 18:12:14 .:Earnestly:.	tirnanog: I tried '' and \' but neither appeared to work.  The need for ' is also present if the filename contains spaces; ffmpeg is similar for its list inputs but it does support \' iirc
Nov 17 18:12:45 .:tirnanog:.	Earnestly: it's so tiresome to have to reason with these quirks.
Nov 17 18:13:01 .:Earnestly:.	imagemagick is quite old so I mostly forgive it, it's so much legacy
Nov 17 18:13:09 .:tirnanog:.	yeah, that's true.
Nov 17 18:20:13 .:Earnestly:.	tirnanog: It seems to be in property.c line 3630, at least -format stuff
Nov 17 18:26:56 .:Earnestly:.	tirnanog: https://0x0.st/oIxY.txt (@-/filename handling)
Nov 17 18:27:52 .:tirnanog:.	Earnestly: that may well prove useful. ta.
Nov 17 18:28:11 .:Earnestly:.	From what I can tell it doesn't seem to support any escaping mechanism for ' or "
Nov 17 18:28:36 .:Earnestly:.	utility.c is also full of stuff
Nov 17 18:29:16 .:amosbird:.	emanuele6: thanks!
Nov 17 18:32:38 .:drterminus:.	hi, i want to parse a temperature value out of a log an then test the value. can someone help me with this plz cat logs/info_tools.log | awk '$3 == "Temperatur:" {print substr($4, 1, length($4)-4)}' | if  [ $(</dev/stdin) -gt 5 ]; then echo "hello world"; fi;
Nov 17 18:33:17 .:Earnestly:.	tirnanog: I found this in my random researchings and it seems useful to know in general https://stackoverflow.com/questions/23748610/fastest-way-to-create-multiple-thumbnails-from-a-single-large-image-in-python/32169224#32169224
Nov 17 18:33:39 .:Earnestly:.	drterminus: awk can do the comparison and print hello world
Nov 17 18:33:53 .:emanuele6:.	and can also read the file without cat
Nov 17 18:34:23 .:drterminus:.	how does awk know it is double and not string ?
Nov 17 18:34:48 .:drterminus:.	after all i want to monitor the file with tail -fn0
Nov 17 18:35:07 .:emanuele6:.	ok, so you are trying to compare a fractional number with [ -gt ].. that is not going to work
Nov 17 18:35:14 .:emanuele6:.	it would work in awk again
Nov 17 18:35:32 .:drterminus:.	ah ok
Nov 17 18:35:42 .:drterminus:.	ill look into that
Nov 17 18:35:45 .:drterminus:.	thx
Nov 17 18:35:52 .:emanuele6:.	drterminus: can we see how a Temperatur: line looks like in that file?
Nov 17 18:36:01 .:drterminus:.	3.5
Nov 17 18:36:05 .:drterminus:.	for examle
Nov 17 18:36:06 .:emanuele6:.	a line.
Nov 17 18:36:09 .:Earnestly:.	drterminus: The whole line
Nov 17 18:36:45 .:drterminus:.	2022-11-17 17:05:03:INFO:read_save_sensors:Temp. Heizung: 7.6 Luftfeuchte 46.0  aussen -13.125
Nov 17 18:36:59 .:emanuele6:.	where is "Temperatur:"?
Nov 17 18:37:31 .:drterminus:.	ah sorry false line
Nov 17 18:37:37 .:drterminus:.	2022-11-17 17:05:02:INFO:sensors:DHT22(nr:22): Temperatur: 7.6°C, Luftfeuchtigkeit: 46.0%
Nov 17 18:39:33 .:Earnestly:.	# awk 'BEGIN { hmm = "7.6°C," + 0; if(hmm == 7.6) print "weak typing is fun"}'
Nov 17 18:39:36 .:shbot:.	Earnestly: weak typing is fun
Nov 17 18:39:47 .:emanuele6:.	awk -F 'Temperatur:' '$2 && $2 > 5 { print +$2 }' logs/info_tools.log
Nov 17 18:39:49 .:emanuele6:.	or
Nov 17 18:39:58 .:emanuele6:.	awk -F 'Temperatur:' '$2 && $2 > 5 { print "hello world" }' logs/info_tools.log
Nov 17 18:41:07 .:Earnestly:.	emanuele6: Doesn't seem to work here
Nov 17 18:41:57 .:drterminus:.	here neither
Nov 17 18:42:00 .:emanuele6:.	# printf '2022-11-17 17:05:02:INFO:sensors:DHT22(nr:22): Temperatur: %s°C, Luftfeuchtigkeit: 46.0%' 7.6 3.2 10.2
Nov 17 18:42:00 .:Earnestly:.	awk '$3 == "Temperatur:" && $4 + 0 > 5 { print "hello world"}'
Nov 17 18:42:04 .:shbot:.	emanuele6: bash: printf: `%': missing format character
Nov 17 18:42:04 .:shbot:.	emanuele6: 2022-11-17 17:05:02:INFO:sensors:DHT22(nr:22): Temperatur: 7.6°C, Luftfeuchtigkeit: 46.0
Nov 17 18:42:07 .:drterminus:.	Earnestly: works
Nov 17 18:42:11 .:emanuele6:.	# printf '2022-11-17 17:05:02:INFO:sensors:DHT22(nr:22): Temperatur: %s°C, Luftfeuchtigkeit: 46.0%%' 7.6 3.2 10.2
Nov 17 18:42:13 .:shbot:.	emanuele6: 2022-11-17 17:05:02:INFO:sensors:DHT22(nr:22): Temperatur: 7.6°C, Luftfeuchtigkeit: 46.0%2022-11-17 17:05:02:INFO:sensors:DHT22(nr:22): Temperatur: 3.2°C, Luftfeuchtigkeit: 46.0%2022-11-17 17:05:02:INFO:sensors:DHT22(nr:22): Temperatur: 10.2°C, Luftfeuchtigkeit: 46.0%
Nov 17 18:42:17 .:emanuele6:.	err
Nov 17 18:42:20 .:emanuele6:.	# printf '2022-11-17 17:05:02:INFO:sensors:DHT22(nr:22): Temperatur: %s°C, Luftfeuchtigkeit: 46.0%%\\n' 7.6 3.2 10.2
Nov 17 18:42:22 .:shbot:.	emanuele6: 2022-11-17 17:05:02:INFO:sensors:DHT22(nr:22): Temperatur: 7.6°C, Luftfeuchtigkeit: 46.0%\n2022-11-17 17:05:02:INFO:sensors:DHT22(nr:22): Temperatur: 3.2°C, Luftfeuchtigkeit: 46.0%\n2022-11-17 17:05:02:INFO:sensors:DHT22(nr:22): Temperatur: 10.2°C, Luftfeuchtigkeit: 46.0%\n
Nov 17 18:42:31 .:emanuele6:.	# printf '2022-11-17 17:05:02:INFO:sensors:DHT22(nr:22): Temperatur: %s°C, Luftfeuchtigkeit: 46.0%%\n' 7.6 3.2 10.2
Nov 17 18:42:33 .:shbot:.	emanuele6: 2022-11-17 17:05:02:INFO:sensors:DHT22(nr:22): Temperatur: 7.6°C, Luftfeuchtigkeit: 46.0%
Nov 17 18:42:43 .:Earnestly:.	RIP
Nov 17 18:43:05 .:Earnestly:.	drterminus: Usually very good, uses awk in clever ways, often too clever imo
Nov 17 18:43:07 .:Earnestly:.	But lots of nice ideas
Nov 17 18:44:21 .:tirnanog:.	oh dear. his boundless energy finally got the better of him.
Nov 17 18:44:49 .:Earnestly:.	drterminus: Using -F Temperature: would mean that $2 would become: "7.6°C, Luftfeuchtigkeit: 46.0%", and if that was "type cast" using +0 then it'd become 7.6
Nov 17 18:45:23 .:Earnestly:.	drterminus: So his would work as: awk -F 'Temperatur:' '$2 && $2+0 > 5 {print "hello world"}'
Nov 17 18:45:52 .:Earnestly:.	I prefer using $3 as you did just because it's much clearer
Nov 17 18:47:24 .:sers:.	Channel: What's cooler? `(sleep 1m; glxgears -info) & disown' or `sleep 1m && glxgears -info & disown'?
Nov 17 18:49:12 .:tirnanog:.	a more appropriate question would be "which behaves in the way that I want?"
Nov 17 18:55:21 .:drterminus:.	Earnestly: ty for explaining
Nov 17 18:55:41 .:drterminus:.	thx for all your input
Nov 17 18:56:11 .:Earnestly:.	drterminus: As a rule, if you introduce a tool like awk, it's best to try and make full use of it.  Same goes for any dependency
Nov 17 18:56:34 »»	sers thinks about full use...
Nov 17 18:56:37 »»	sers feels like a tool
Nov 17 18:56:40 .:sers:.	:)
Nov 17 18:57:04 .:Earnestly:.	It's an old unix idea called 'full exploitation'
Nov 17 18:57:19 .:sers:.	AWK documentation is so long/extensive.
Nov 17 18:57:28 »»	sers can't remember
Nov 17 18:57:52 .:sers:.	If I were to remember the entire AWK documentation, I'd probably feel weird.
Nov 17 19:13:40 .:emanuele6:.	whoops :)
Nov 17 19:26:22 .:Earnestly:.	emanuele6: A fix was changing $2 > 5 to $2+0 > 5
Nov 17 19:26:51 .:emanuele6:.	shouldn't $2 implicitly be treated as a number in that context?
Nov 17 19:28:04 .:emanuele6:.	by the way, ozone permanently banned me from the network; i had to write an appeal at bans@libera.chat D:
Nov 17 19:28:36 .:emanuele6:.	isn't it a little excessive to keep it in the channel?
Nov 17 19:29:15 .:She:.	ozone bans aren't permanent, but ozone is more meant for combatting bot attacks than general channel management.
Nov 17 19:29:57 .:emanuele6:.	oh, i see. i assumed it was permanent since it did not tell me an expire date
Nov 17 19:30:03 .:emanuele6:.	She: thank you again :)
Nov 17 19:31:04 .:Earnestly:.	emanuele6: I would have thought so but apparently not
Nov 17 19:30:14 »»	Disconnected ().
**** ENDING LOGGING AT Thu Nov 17 19:30:14 2022

**** BEGIN LOGGING AT Thu Nov 17 19:34:19 2022

Nov 17 19:39:39 »»	Now talking on #bash
Nov 17 19:39:39 »»	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | https://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Nov 17 19:39:39 »»	Topic for #bash set by twkm at Fri May 21 00:17:30 2021
Nov 17 19:44:49 .:emanuele6:.	https://pubs.opengroup.org/onlinepubs/9699919799/utilities/awk.html#tag_20_06_13_02
Nov 17 19:45:23 .:emanuele6:.	> Comparisons (with the '<', "<=", "!=", "==", '>', and ">=" operators) shall be made numerically if both operands are numeric, if one is numeric and the other has a string value that is a numeric string, or if one is numeric and the other has the uninitialized value.
Nov 17 19:45:43 .:Earnestly:.	"numeric string"
Nov 17 19:45:59 .:Earnestly:.	Oh it even defines what a numeric string is
Nov 17 19:46:00 .:emanuele6:.	i guess  "7.6°C, Luftfeuchtigkeit: 46.0%"  does not count as a "numeric string" for the current locale
Nov 17 19:46:03 .:Earnestly:.	> A string value shall be considered a numeric string if it comes from one of the following:
Nov 17 19:46:11 .:emanuele6:.	so 5 is converted to a string
Nov 17 19:46:14 .:Earnestly:.	> Field variables
Nov 17 19:46:22 .:Earnestly:.	emanuele6: Do you think locale changes that?
Nov 17 19:46:42 .:emanuele6:.	and "For the other operators"(not != or ==)", the strings shall be compared using the locale-specific collation sequence." is performed
Nov 17 19:47:11 .:Earnestly:.	awk 'BEGIN {hm = "7.6°C"; if(hm > 5) print "."}'
Nov 17 19:47:14 .:Earnestly:.	# awk 'BEGIN {hm = "7.6°C"; if(hm > 5) print "."}'
Nov 17 19:47:16 .:shbot:.	Earnestly: .
Nov 17 19:47:34 .:Earnestly:.	# LANG=en_US.UTF-8 awk 'BEGIN {hm = "7.6°C"; if(hm > 5) print "."}'
Nov 17 19:47:36 .:shbot:.	Earnestly: .
Nov 17 19:48:01 .:Earnestly:.	Hmm
Nov 17 19:48:05 .:emanuele6:.	Earnestly: > and an implementation-dependent condition corresponding to either case (a) or (b) below is met [...] a. [...] setlocale(LC_NUMERIC, "");
Nov 17 19:48:08 .:Earnestly:.	# awk 'BEGIN {hm = "7.6°C,"; if(hm > 5) print "."}'
Nov 17 19:48:10 .:shbot:.	Earnestly: .
Nov 17 19:48:27 .:Earnestly:.	Oh
Nov 17 19:48:39 .:Earnestly:.	# awk 'BEGIN {hm = "7.6°C,"; if(hm == 7.6) print "."}'
Nov 17 19:48:41 .:shbot:.	Earnestly: no output
Nov 17 19:50:49 .:Earnestly:.	This is a bit too confusing me to try and remember, +0 (or any other explicit technique) seems less burdensome
**** ENDING LOGGING AT Thu Nov 17 19:59:54 2022

**** BEGIN LOGGING AT Fri Dec  2 02:45:39 2022

Dec 02 02:51:16 »»	Now talking on #bash
Dec 02 02:51:16 »»	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | https://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Dec 02 02:51:16 »»	Topic for #bash set by twkm at Fri May 21 00:17:30 2021
Dec 02 02:48:33 »»	Disconnected ().
**** ENDING LOGGING AT Fri Dec  2 02:48:33 2022

**** BEGIN LOGGING AT Fri Dec  2 02:48:53 2022

Dec 02 02:54:31 »»	Now talking on #bash
Dec 02 02:54:31 »»	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | https://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Dec 02 02:54:31 »»	Topic for #bash set by twkm at Fri May 21 00:17:30 2021
Dec 02 02:52:27 .:woland:.	is it possible to have dialog take menu items from a list stored in a file or a VAR?
Dec 02 02:57:33 »»	Disconnected ().
**** ENDING LOGGING AT Fri Dec  2 02:57:33 2022

**** BEGIN LOGGING AT Fri Dec  2 03:05:09 2022

Dec 02 03:10:46 »»	Now talking on #bash
Dec 02 03:10:46 »»	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | https://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Dec 02 03:10:46 »»	Topic for #bash set by twkm at Fri May 21 00:17:30 2021
**** ENDING LOGGING AT Fri Dec  2 03:25:13 2022

**** BEGIN LOGGING AT Fri Dec  2 19:34:59 2022

Dec 02 19:40:36 »»	Now talking on #bash
Dec 02 19:40:36 »»	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | https://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Dec 02 19:40:36 »»	Topic for #bash set by twkm at Fri May 21 00:17:30 2021
**** ENDING LOGGING AT Fri Dec  2 19:36:22 2022

**** BEGIN LOGGING AT Fri Dec  2 19:36:57 2022

Dec 02 19:42:35 »»	Now talking on #bash
Dec 02 19:42:35 »»	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | https://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Dec 02 19:42:35 »»	Topic for #bash set by twkm at Fri May 21 00:17:30 2021
Dec 02 19:43:25 .:lopid:.	declare -p var > file
Dec 02 19:38:03 .:woland:.	can someone help me fix this integer expression error? http://0x0.st/okA7.sh idk what I'm doing wrong
Dec 02 19:45:21 .:phy1729:.	You have floats not integers and [ doesn't do floats
Dec 02 19:45:36 .:lopid:.	doesn't float down there
Dec 02 19:41:19 .:woland:.	Ah!
Dec 02 19:47:09 .:Enissay:.	lopid: Almost... but everything is escaped, cannot be executed :<
Dec 02 19:47:59 .:lopid:.	eval?
Dec 02 19:56:16 .:emanuele6:.	printf '%s\n' "$tmp_cmd" > file  ?
Dec 02 19:57:55 .:woland:.	phy1729: fixed it with bc, thanks
**** ENDING LOGGING AT Fri Dec  2 20:03:02 2022

**** BEGIN LOGGING AT Wed Dec  7 04:45:03 2022

Dec 07 04:50:43 »»	Now talking on #bash
Dec 07 04:50:43 »»	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | https://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Dec 07 04:50:43 »»	Topic for #bash set by twkm at Fri May 21 00:17:30 2021
Dec 07 04:46:17 »»	Disconnected ().
**** ENDING LOGGING AT Wed Dec  7 04:46:17 2022

**** BEGIN LOGGING AT Wed Dec  7 04:46:27 2022

Dec 07 04:52:09 »»	Now talking on #bash
Dec 07 04:52:09 »»	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | https://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Dec 07 04:52:09 »»	Topic for #bash set by twkm at Fri May 21 00:17:30 2021
**** ENDING LOGGING AT Wed Dec  7 04:48:54 2022

**** BEGIN LOGGING AT Wed Dec  7 05:00:33 2022

Dec 07 05:06:19 »»	Now talking on #bash
Dec 07 05:06:19 »»	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | https://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Dec 07 05:06:19 »»	Topic for #bash set by twkm at Fri May 21 00:17:30 2021
Dec 07 06:07:43 .:wad:.	I've got a bash script running with -e, that it stops if a command returns an error signal. Is there a way to prevent this for one command in it?
Dec 07 06:10:21 .:wad:.	I'm thinking there might be some way of intercepting an exit code before it gets to the shell?
Dec 07 06:18:02 .:phy1729:.	!-e
Dec 07 06:18:02 .:+greybot:.	"set -e" is an inheritance of the old bourne shell, and doesn't really work well with modern shell features. You'll really have less buggy scripts if you do the error handling manually instead of relying on the unreliable "set -e"; see http://mywiki.wooledge.org/BashFAQ/105
**** ENDING LOGGING AT Wed Dec  7 06:21:57 2022

**** BEGIN LOGGING AT Wed Dec  7 23:37:45 2022

Dec 07 23:43:30 »»	Now talking on #bash
Dec 07 23:43:30 »»	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | https://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Dec 07 23:43:30 »»	Topic for #bash set by twkm at Fri May 21 00:17:30 2021
Dec 07 23:52:15 .:Nintendo:.	A coworker's bash doesn't even have mapfile...
Dec 07 23:52:34 .:greycat:.	mapfile is in bash 4.0
Dec 07 23:52:46 .:Nintendo:.	They're rocking 3.2.57.
Dec 07 23:52:48 .:greycat:.	so if they're on a Mac with bash 3.2, that would do it
Dec 07 23:52:48 .:Nintendo:.	Yay for Mac.
Dec 07 23:53:23 .:Nintendo:.	Any good resources for upgrading?
Dec 07 23:53:24 .:ormaaj:.	you can write mapfile as a bash function it'll just be slow.
Dec 07 23:54:33 .:ormaaj:.	yeah you can buy better computers almost anywhere
Dec 07 23:54:51 .:Nintendo:.	I get the feeling that we're going to run into more problems than just mapfile...
Dec 07 23:55:14 .:ormaaj:.	:)
Dec 07 23:55:20 .:greycat:.	The single biggest thing in 4.0+ that's not in 3.2 is associative arrays.
Dec 07 23:55:57 .:greycat:.	(and you can't do that one with a simple function)
Dec 07 23:56:05 .:neshpion:.	i thought macos switched to zsh
Dec 07 23:56:37 .:Nintendo:.	They did.  But bash scripts did not. 😉
Dec 07 23:56:56 .:ormaaj:.	I hear of people installing bash through that apple package manager thing all the time and have never heard of problems
Dec 07 23:57:02 .:neshpion:.	ln -s /bin/zsh /bin/bash :^)
Dec 07 23:57:25 .:Nintendo:.	Ahh, interesting idea, neshpion... I do not want to rock this person's world just yet, though.
Dec 07 23:58:28 .:ormaaj:.	that is completely dumb. #zsh would surely agree.
Dec 08 00:00:26 .:neshpion:.	sometimes the dumb answer is the best answer though :^)
Dec 08 00:00:47 .:greycat:.	If it's the best answer, it wouldn't be called dumb.
Dec 08 01:02:38 .:tangy:.	there is an old adage, 'sometimes the worst horse is the best horse.'
Dec 08 01:03:03 .:phogg:.	meaning what?
Dec 08 01:07:19 .:Earnestly:.	phogg: Seems to mean something related to the idea that something bad has more room to improve
Dec 08 01:08:28 .:neshpion:.	it's from a zen parable which has a moral lesson about the depth of learning potential. the best horse has no improvement to make, but the worst one's journey can be the richest in terms of growth. "In your very imperfections you will find the basis for your firm, way-seeking mind. So I think that sometimes the best horse may be the worst horse, and the worst horse can be the best one."
Dec 08 01:09:30 .:tangy:.	yes, suzuki, zen mind beginner's mind, part 1, the marrow of zen
Dec 08 01:11:11 .:neshpion:.	but with regard to what prompted this, there's another adage: "it's not stupid if it works" :^^^^^)
Dec 08 01:11:36 .:greycat:.	hah
Dec 08 01:11:47 .:Earnestly:.	neshpion: http://i.imgur.com/cG9Te.jpg
Dec 08 01:11:59 .:greycat:.	I appreciate that, but one must also be careful how one judges "works".
Dec 08 01:12:54 .:greycat:.	all of the "classic" shell scripting paradigms that fall to pieces on unusual filenames may "work" on 99.99% of systems, but they're still stupid
Dec 08 01:13:11 .:Earnestly:.	I mean, any fool can build a bridge but only an engineer has the potential to do it on time and under budget - that noted, I doubt most fools can even build bridges
Dec 08 01:16:49 .:ormaaj:.	Almost finished reimplementing my init system in malbolge. Confident it will work!
Dec 08 01:17:04 .:phogg:.	lol
Dec 08 01:17:53 .:Earnestly:.	dangerous engineering
Dec 08 01:18:28 .:neshpion:.	dangineering
Dec 08 01:19:07 .:neshpion:.	wouldn't that be an oxymoron though?
Dec 08 01:19:45 .:greycat:.	No.  The two terms aren't opposites.
Dec 08 01:20:46 .:Earnestly:.	neshpion: dangineering is likely whatever jigsaw does
**** ENDING LOGGING AT Thu Dec  8 01:21:47 2022

**** BEGIN LOGGING AT Thu Dec  8 17:18:26 2022

Dec 08 17:24:12 »»	Now talking on #bash
Dec 08 17:24:12 »»	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | https://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Dec 08 17:24:12 »»	Topic for #bash set by twkm at Fri May 21 00:17:30 2021
**** BEGIN LOGGING AT Thu Dec  8 17:38:52 2022

Dec 08 17:44:37 »»	Now talking on #bash
Dec 08 17:44:37 »»	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | https://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Dec 08 17:44:37 »»	Topic for #bash set by twkm at Fri May 21 00:17:30 2021
**** ENDING LOGGING AT Thu Dec  8 19:17:34 2022

**** BEGIN LOGGING AT Fri Dec  9 05:41:37 2022

Dec 09 05:47:24 »»	Now talking on #bash
Dec 09 05:47:24 »»	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | https://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Dec 09 05:47:24 »»	Topic for #bash set by twkm at Fri May 21 00:17:30 2021
Dec 09 05:49:26 »»	Disconnected ().
**** ENDING LOGGING AT Fri Dec  9 05:49:26 2022

**** BEGIN LOGGING AT Fri Dec  9 05:53:00 2022

Dec 09 05:58:48 »»	Now talking on #bash
Dec 09 05:58:48 »»	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | https://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Dec 09 05:58:48 »»	Topic for #bash set by twkm at Fri May 21 00:17:30 2021
Dec 09 05:54:26 »»	Disconnected ().
**** ENDING LOGGING AT Fri Dec  9 05:54:26 2022

**** BEGIN LOGGING AT Fri Dec  9 05:54:46 2022

Dec 09 06:00:34 »»	Now talking on #bash
Dec 09 06:00:34 »»	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | https://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Dec 09 06:00:34 »»	Topic for #bash set by twkm at Fri May 21 00:17:30 2021
Dec 09 06:43:26 »»	Disconnected ().
**** ENDING LOGGING AT Fri Dec  9 06:43:26 2022

**** BEGIN LOGGING AT Fri Dec  9 06:47:09 2022

Dec 09 06:52:58 »»	Now talking on #bash
Dec 09 06:52:58 »»	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | https://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Dec 09 06:52:58 »»	Topic for #bash set by twkm at Fri May 21 00:17:30 2021
Dec 09 06:50:56 »»	Disconnected ().
**** ENDING LOGGING AT Fri Dec  9 06:50:56 2022

**** BEGIN LOGGING AT Fri Dec  9 06:59:49 2022

Dec 09 07:05:37 »»	Now talking on #bash
Dec 09 07:05:37 »»	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | https://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Dec 09 07:05:37 »»	Topic for #bash set by twkm at Fri May 21 00:17:30 2021
Dec 09 07:05:59 .:FreeBDSM_:.	ah, remembered, no need for double quotes around that var
Dec 09 07:06:17 .:ormaaj:.	eval?
Dec 09 07:06:18 .:phy1729:.	!faq complex
Dec 09 07:06:19 .:+greybot:.	https://mywiki.wooledge.org/BashFAQ/050 -- I'm trying to put a command in a variable, but the complex cases always fail!
Dec 09 07:06:27 .:phy1729:.	use an array
Dec 09 07:06:52 .:ormaaj:.	oh nvm.
Dec 09 07:07:20 .:FreeBDSM_:.	wait, omitting double quotes still resulted into an error pointing at the wrong use of args
Dec 09 07:09:11 .:ormaaj:.	"${args}" is dumb. Impossible to answer without knowing why you have this dumb variable in the first place.
Dec 09 07:09:42 .:FreeBDSM_:.	https://paste.sh/L5U5xa-Q#p6pmAf1W6NcW35ELZXZCkZLB
Dec 09 07:09:48 .:ormaaj:.	99% chance it will be "use an array"
Dec 09 07:10:00 .:FreeBDSM_:.	I tried to use an array ^ way
Dec 09 07:10:19 .:FreeBDSM_:.	still getting the same errors as if I used variable without quotes
Dec 09 07:11:06 .:FreeBDSM_:.	curl: (6) could not resolve host: application, curl: (6) could not resolve host: application, curl: (6) could not resolve host: Bearer, curl: (6) could not resolve host: mytoken
Dec 09 07:11:13 .:ormaaj:.	>:-(
Dec 09 07:12:10 .:FreeBDSM_:.	god damn it! needed double quotes around array var!
Dec 09 07:14:53 .:ormaaj:.	Dude you've been here for over a year. There is no way you don't know that.
Dec 09 07:17:18 .:FreeBDSM_:.	can't remember that stuff as there seems to be no logic behind it, have to just try all possible variants anyways
Dec 09 07:19:02 .:ormaaj:.	anything that expands to multiple arguments needs quotes always. Kind of a pattern there.
Dec 09 07:21:24 .:FreeBDSM_:.	if I don't use array and use `curl ${args} "${url}"` (without double quotes around args) - why does bash seems to remove the single quotes around args values containing spaces? I didn't ask it to do that
Dec 09 07:22:13 .:ormaaj:.	Because field splitting
Dec 09 07:22:31 .:ormaaj:.	it doesn't actually do that. The behavior depends on the value of IFS
Dec 09 07:22:40 .:ormaaj:.	if IFS contains quotes then sure
Dec 09 07:23:55 .:FreeBDSM_:.	https://paste.sh/8lrjQB3v#JEtwCxysur8mL_FyPzHHJIuh I mean that there's a difference between line 7 and 9, but bash makes them the same
Dec 09 07:25:01 .:ormaaj:.	it doesn't
Dec 09 07:26:01 .:ormaaj:.	single quotes inside of double quotes is a red flag that you're doing something wrong
Dec 09 07:26:41 .:FreeBDSM_:.	that's like a personal attack!
Dec 09 07:27:04 .:ormaaj:.	All you really need to know is that field splitting is broken. Understanding how it works doesn't change the fact that you should never use it.
Dec 09 07:29:17 .:FreeBDSM_:.	as for your "it doesn't actually do that" - in both cases the output of the script is the same
Dec 09 07:30:14 .:FreeBDSM_:.	and I tried to add `IFS+="'"` and that didn't change anything
Dec 09 07:31:46 .:ormaaj:.	# curl_args="-k -H 'Accept: application/json' -H 'Content-Type: application/json' -H 'Authorization: Bearer ${token}'" curl_args2="-k -H Accept: application/json -H Content-Type: application/json -H Authorization: Bearer ${token}"; printf '<%s> ' $curl_args; echo; printf '<%s> ' $curl_args2; echo
Dec 09 07:31:50 .:+shbot:.	ormaaj: <-k> <-H> <'Accept:> <application/json'> <-H> <'Content-Type:> <application/json'> <-H> <'Authorization:> <Bearer> <'>
Dec 09 07:31:50 .:+shbot:.	ormaaj: <-k> <-H> <Accept:> <application/json> <-H> <Content-Type:> <application/json> <-H> <Authorization:> <Bearer>
Dec 09 07:32:08 .:ormaaj:.	not same. thanks for playing.
Dec 09 07:32:30 .:FreeBDSM_:.	ah, so it's curl that filters some more
Dec 09 07:32:35 .:FreeBDSM_:.	thanks for illustrating
**** ENDING LOGGING AT Fri Dec  9 08:17:29 2022

